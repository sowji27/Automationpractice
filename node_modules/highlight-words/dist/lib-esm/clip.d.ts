import { HighlightWords } from '.';
/**
 * This provides context around a chunk's text, based on the next and previous chunks.
 * e.g. If we have the string "The quick brown fox jumped over the lazy dog",
 * and the search term "fox jumped", with a padding of 2, we want to have the end result be:
 * "... quick brown fox jumped over the ..."
 * The search term, "fox jumped" is left as is, and the left and right chunks, instead of having
 * the text in full, will be clipped.
 */
export default function clip({ curr, next, prev, clipBy }: HighlightWords.Clip): string;
