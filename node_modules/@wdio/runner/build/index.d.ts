/// <reference types="webdriverio/webdriverio-core" />
/// <reference types="webdriverio" />
/// <reference types="@wdio/cucumber-framework" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { ConfigOptions, SingleConfigOption, Capability } from '@wdio/config';
interface Args extends Partial<ConfigOptions> {
    ignoredWorkerServices?: string[];
}
declare type RunParams = {
    cid: string;
    args: Args;
    specs: string[];
    caps: Capability;
    configFile: string;
    retries: number;
};
export default class Runner extends EventEmitter {
    private _configParser;
    private _sigintWasCalled;
    private _isMultiremote;
    private _reporter?;
    private _framework?;
    private _config?;
    private _cid?;
    private _specs?;
    private _caps?;
    run({ cid, args, specs, caps, configFile, retries }: RunParams): Promise<number>;
    _initSession(config: SingleConfigOption, caps: Capability, browserStub?: WebdriverIO.BrowserObject | WebdriverIO.MultiRemoteBrowserObject): Promise<import("webdriverio").BrowserObject | import("webdriverio").MultiRemoteBrowserObject | undefined>;
    _startSession(config: SingleConfigOption, caps: Capability): Promise<import("webdriverio").BrowserObject | import("webdriverio").MultiRemoteBrowserObject | undefined>;
    _fetchDriverLogs(config: ConfigOptions, excludeDriverLogs: string[]): Promise<void[] | undefined>;
    _shutdown(failures: number, retries: number): Promise<number>;
    endSession(): Promise<void>;
}
export {};
//# sourceMappingURL=index.d.ts.map