"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const events_1 = require("events");
const logger_1 = __importDefault(require("@wdio/logger"));
const utils_1 = require("@wdio/utils");
const config_1 = require("@wdio/config");
const reporter_1 = __importDefault(require("./reporter"));
const utils_2 = require("./utils");
const log = logger_1.default('@wdio/runner');
class Runner extends events_1.EventEmitter {
    constructor() {
        super(...arguments);
        this._configParser = new config_1.ConfigParser();
        this._sigintWasCalled = false;
        this._isMultiremote = false;
    }
    async run({ cid, args, specs, caps, configFile, retries }) {
        this._cid = cid;
        this._specs = specs;
        this._caps = caps;
        try {
            this._configParser.addConfigFile(configFile);
        }
        catch (e) {
            return this._shutdown(1, retries);
        }
        this._configParser.merge(args);
        this._config = this._configParser.getConfig();
        this._config.specFileRetryAttempts = (this._config.specFileRetries || 0) - (retries || 0);
        logger_1.default.setLogLevelsConfig(this._config.logLevels, this._config.logLevel);
        const isMultiremote = this._isMultiremote = !Array.isArray(this._configParser.getCapabilities());
        let browser = await this._startSession({
            ...this._config,
            _automationProtocol: this._config.automationProtocol,
            automationProtocol: './protocol-stub'
        }, caps);
        utils_1.initialiseWorkerService(this._config, caps, args.ignoredWorkerServices).map(this._configParser.addService.bind(this._configParser));
        await utils_1.executeHooksWithArgs('beforeSession', this._config.beforeSession, [this._config, this._caps, this._specs]);
        this._reporter = new reporter_1.default(this._config, this._cid, { ...caps });
        this._framework = utils_1.initialisePlugin(this._config.framework, 'framework').default;
        this._framework = await this._framework.init(cid, this._config, specs, caps, this._reporter);
        process.send({ name: 'testFrameworkInit', content: { cid, caps, specs, hasTests: this._framework.hasTests() } });
        if (!this._framework.hasTests()) {
            return this._shutdown(0, retries);
        }
        browser = await this._initSession(this._config, this._caps, browser);
        if (!browser) {
            return this._shutdown(1, retries);
        }
        this._reporter.caps = browser.capabilities;
        await utils_1.executeHooksWithArgs('before', this._config.before, [this._caps, this._specs, browser]);
        if (this._sigintWasCalled) {
            log.info('SIGINT signal detected while starting session, shutting down...');
            await this.endSession();
            return this._shutdown(0, retries);
        }
        const multiRemoteBrowser = browser;
        this._reporter.emit('runner:start', {
            cid,
            specs,
            config: this._config,
            isMultiremote,
            sessionId: browser.sessionId,
            capabilities: isMultiremote
                ? multiRemoteBrowser.instances.reduce((caps, browserName) => {
                    caps[browserName] = multiRemoteBrowser[browserName].capabilities;
                    caps[browserName].sessionId = multiRemoteBrowser[browserName].sessionId;
                    return caps;
                }, {})
                : { ...browser.capabilities, sessionId: browser.sessionId },
            retry: this._config.specFileRetryAttempts
        });
        const { protocol, hostname, port, path, queryParams } = browser.options;
        const { isW3C, sessionId } = browser;
        const instances = utils_2.getInstancesData(browser, isMultiremote);
        process.send({
            origin: 'worker',
            name: 'sessionStarted',
            content: { sessionId, isW3C, protocol, hostname, port, path, queryParams, isMultiremote, instances }
        });
        let failures = 0;
        try {
            failures = await this._framework.run();
            await this._fetchDriverLogs(this._config, caps.excludeDriverLogs);
        }
        catch (e) {
            log.error(e);
            this.emit('error', e);
            failures = 1;
        }
        if (!args.watch) {
            await this.endSession();
        }
        return this._shutdown(failures, retries);
    }
    async _initSession(config, caps, browserStub) {
        const browser = await this._startSession(config, caps);
        if (!browser) {
            return;
        }
        if (browserStub) {
            Object.entries(browserStub).forEach(([key, value]) => {
                if (typeof browser[key] === 'undefined') {
                    browser[key] = value;
                }
            });
        }
        global.$ = (selector) => browser.$(selector);
        global.$$ = (selector) => browser.$$(selector);
        browser.on('command', (command) => { var _a; return (_a = this._reporter) === null || _a === void 0 ? void 0 : _a.emit('client:beforeCommand', Object.assign(command, { sessionId: browser.sessionId })); });
        browser.on('result', (result) => { var _a; return (_a = this._reporter) === null || _a === void 0 ? void 0 : _a.emit('client:afterCommand', Object.assign(result, { sessionId: browser.sessionId })); });
        return browser;
    }
    async _startSession(config, caps) {
        let browser;
        try {
            browser = global.browser = global.driver = await utils_2.initialiseInstance(config, caps, this._isMultiremote);
        }
        catch (e) {
            log.error(e);
            return;
        }
        browser.config = config;
        return browser;
    }
    async _fetchDriverLogs(config, excludeDriverLogs) {
        if (!config.outputDir ||
            !global.browser.sessionId ||
            typeof global.browser.getLogs === 'undefined') {
            return;
        }
        global._HAS_FIBER_CONTEXT = true;
        let logTypes;
        try {
            logTypes = await global.browser.getLogTypes();
        }
        catch (errIgnored) {
            return;
        }
        logTypes = utils_2.filterLogTypes(excludeDriverLogs, logTypes);
        log.debug(`Fetching logs for ${logTypes.join(', ')}`);
        return Promise.all(logTypes.map(async (logType) => {
            let logs;
            try {
                logs = await global.browser.getLogs(logType);
            }
            catch (e) {
                return log.warn(`Couldn't fetch logs for ${logType}: ${e.message}`);
            }
            if (logs.length === 0) {
                return;
            }
            const stringLogs = logs.map((log) => JSON.stringify(log)).join('\n');
            return util_1.default.promisify(fs_1.default.writeFile)(path_1.default.join(config.outputDir, `wdio-${this._cid}-${logType}.log`), stringLogs, 'utf-8');
        }));
    }
    async _shutdown(failures, retries) {
        this._reporter.emit('runner:end', {
            failures,
            cid: this._cid,
            retries
        });
        try {
            await this._reporter.waitForSync();
        }
        catch (e) {
            log.error(e);
        }
        this.emit('exit', failures === 0 ? 0 : 1);
        return failures;
    }
    async endSession() {
        const multiremoteBrowser = global.browser;
        const hasSessionId = Boolean(global.browser) && (this._isMultiremote
            ? !multiremoteBrowser.instances.some(i => multiremoteBrowser[i] && !multiremoteBrowser[i].sessionId)
            : global.browser.sessionId);
        if (!hasSessionId) {
            return;
        }
        const capabilities = global.browser.capabilities || {};
        if (this._isMultiremote) {
            multiremoteBrowser.instances.forEach((browserName) => {
                capabilities[browserName] = multiremoteBrowser[browserName].capabilities;
            });
        }
        await global.browser.deleteSession();
        if (this._isMultiremote) {
            multiremoteBrowser.instances.forEach(i => {
                delete multiremoteBrowser[i].sessionId;
            });
        }
        else {
            delete global.browser.sessionId;
        }
        await utils_1.executeHooksWithArgs('afterSession', global.browser.config.afterSession, [this._config, capabilities, this._specs]);
    }
}
exports.default = Runner;
