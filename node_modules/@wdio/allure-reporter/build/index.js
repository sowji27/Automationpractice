"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const reporter_1 = __importDefault(require("@wdio/reporter"));
const allure_js_commons_1 = __importDefault(require("allure-js-commons"));
const step_1 = __importDefault(require("allure-js-commons/beans/step"));
const utils_1 = require("./utils");
const constants_1 = require("./constants");
class AllureReporter extends reporter_1.default {
    constructor(options = {}) {
        const outputDir = options.outputDir || 'allure-results';
        super({
            ...options,
            outputDir,
        });
        this._allure = new allure_js_commons_1.default();
        this._capabilities = {};
        this._config = {};
        this._options = options;
        this._allure.setOptions({ targetDir: outputDir });
        this.registerListeners();
        this._lastScreenshot = undefined;
    }
    registerListeners() {
        process.on(constants_1.events.addLabel, this.addLabel.bind(this));
        process.on(constants_1.events.addFeature, this.addFeature.bind(this));
        process.on(constants_1.events.addStory, this.addStory.bind(this));
        process.on(constants_1.events.addSeverity, this.addSeverity.bind(this));
        process.on(constants_1.events.addIssue, this.addIssue.bind(this));
        process.on(constants_1.events.addTestId, this.addTestId.bind(this));
        process.on(constants_1.events.addEnvironment, this.addEnvironment.bind(this));
        process.on(constants_1.events.addAttachment, this.addAttachment.bind(this));
        process.on(constants_1.events.addDescription, this.addDescription.bind(this));
        process.on(constants_1.events.startStep, this.startStep.bind(this));
        process.on(constants_1.events.endStep, this.endStep.bind(this));
        process.on(constants_1.events.addStep, this.addStep.bind(this));
        process.on(constants_1.events.addArgument, this.addArgument.bind(this));
    }
    onRunnerStart(runner) {
        this._config = runner.config;
        this._capabilities = runner.capabilities;
        this._isMultiremote = runner.isMultiremote || false;
    }
    onSuiteStart(suite) {
        if (this._options.useCucumberStepReporter) {
            if (suite.type === 'feature') {
                return this._allure.startSuite(suite.title);
            }
            this._allure.startCase(suite.title);
            const currentTest = this._allure.getCurrentTest();
            this.getLabels(suite).forEach(({ name, value }) => {
                currentTest.addLabel(name, value);
            });
            if (suite.description) {
                this.addDescription(suite);
            }
            return this.setCaseParameters(suite.cid);
        }
        const currentSuite = this._allure.getCurrentSuite();
        const prefix = currentSuite ? currentSuite.name + ': ' : '';
        this._allure.startSuite(prefix + suite.title);
    }
    onSuiteEnd(suite) {
        if (this._options.useCucumberStepReporter && suite.type === 'scenario') {
            suite.hooks = suite.hooks.map((hook) => {
                hook.state = hook.state ? hook.state : 'passed';
                return hook;
            });
            const suiteChildren = [...suite.tests, ...suite.hooks];
            const isPassed = !suiteChildren.some(item => item.state !== 'passed');
            if (isPassed) {
                return this._allure.endCase('passed');
            }
            const isSkipped = suiteChildren.every(item => [constants_1.PASSED, constants_1.SKIPPED].indexOf(item.state) >= 0);
            if (isSkipped) {
                return this._allure.endCase(constants_1.PENDING);
            }
            return;
        }
        this._allure.endSuite();
    }
    onTestStart(test) {
        const testTitle = test.currentTest ? test.currentTest : test.title;
        if (this.isAnyTestRunning() && this._allure.getCurrentTest().name == testTitle) {
            this.setCaseParameters(test.cid);
            return;
        }
        if (this._options.useCucumberStepReporter) {
            return this._allure.startStep(testTitle);
        }
        this._allure.startCase(testTitle);
        this.setCaseParameters(test.cid);
    }
    setCaseParameters(cid) {
        const currentTest = this._allure.getCurrentTest();
        if (!this._isMultiremote) {
            const { browserName, deviceName, desired, device } = this._capabilities;
            let targetName = device || browserName || deviceName || cid;
            if (desired && desired.deviceName && desired.platformVersion) {
                targetName = `${device || desired.deviceName} ${desired.platformVersion}`;
            }
            const browserstackVersion = this._capabilities.os_version || this._capabilities.osVersion;
            const version = browserstackVersion || this._capabilities.browserVersion || this._capabilities.version || this._capabilities.platformVersion || '';
            const paramName = (deviceName || device) ? 'device' : 'browser';
            const paramValue = version ? `${targetName}-${version}` : targetName;
            currentTest.addParameter('argument', paramName, paramValue);
        }
        else {
            currentTest.addParameter('argument', 'isMultiremote', 'true');
        }
        currentTest.addLabel('language', 'javascript');
        currentTest.addLabel('framework', 'wdio');
        currentTest.addLabel('thread', cid);
    }
    getLabels({ tags }) {
        const labels = [];
        if (tags) {
            tags.forEach((tag) => {
                const label = tag.name.replace(/[@]/, '').split('=');
                if (label.length === 2) {
                    labels.push({ name: label[0], value: label[1] });
                }
            });
        }
        return labels;
    }
    onTestPass() {
        if (this._options.useCucumberStepReporter) {
            return this._allure.endStep('passed');
        }
        this._allure.endCase(constants_1.PASSED);
    }
    onTestFail(test) {
        if (this._options.useCucumberStepReporter) {
            const testStatus = utils_1.getTestStatus(test, this._config);
            const stepStatus = Object.values(constants_1.stepStatuses).indexOf(testStatus) >= 0 ?
                testStatus : 'failed';
            this._allure.endStep(stepStatus);
            this._allure.endCase(testStatus, utils_1.getErrorFromFailedTest(test));
            return;
        }
        if (!this.isAnyTestRunning()) {
            this.onTestStart(test);
        }
        else {
            this._allure.getCurrentTest().name = test.title;
        }
        const status = utils_1.getTestStatus(test, this._config);
        while (this._allure.getCurrentSuite().currentStep instanceof step_1.default) {
            this._allure.endStep(status);
        }
        this._allure.endCase(status, utils_1.getErrorFromFailedTest(test));
    }
    onTestSkip(test) {
        if (this._options.useCucumberStepReporter) {
            this._allure.endStep('canceled');
        }
        else if (!this._allure.getCurrentTest() || this._allure.getCurrentTest().name !== test.title) {
            this._allure.pendingCase(test.title);
        }
        else {
            this._allure.endCase('pending');
        }
    }
    onBeforeCommand(command) {
        if (!this.isAnyTestRunning()) {
            return;
        }
        const { disableWebdriverStepsReporting } = this._options;
        if (disableWebdriverStepsReporting || this._isMultiremote) {
            return;
        }
        this._allure.startStep(command.method
            ? `${command.method} ${command.endpoint}`
            : command.command);
        const payload = command.body || command.params;
        if (!utils_1.isEmpty(payload)) {
            this.dumpJSON('Request', payload);
        }
    }
    onAfterCommand(command) {
        const { disableWebdriverStepsReporting, disableWebdriverScreenshotsReporting } = this._options;
        if (this.isScreenshotCommand(command) && command.result.value) {
            if (!disableWebdriverScreenshotsReporting) {
                this._lastScreenshot = command.result.value;
            }
        }
        if (!this.isAnyTestRunning()) {
            return;
        }
        this.attachScreenshot();
        if (this._isMultiremote) {
            return;
        }
        if (!disableWebdriverStepsReporting) {
            if (command.result && command.result.value && !this.isScreenshotCommand(command)) {
                this.dumpJSON('Response', command.result.value);
            }
            const suite = this._allure.getCurrentSuite();
            if (!suite || !(suite.currentStep instanceof step_1.default)) {
                return;
            }
            this._allure.endStep('passed');
        }
    }
    onHookStart(hook) {
        if (!hook.parent || !this._allure.getCurrentSuite()) {
            return false;
        }
        if (this._options.disableMochaHooks && utils_1.isMochaEachHooks(hook.title)) {
            if (this._allure.getCurrentTest()) {
                this._allure.startStep(hook.title);
            }
            return;
        }
        if (this._options.disableMochaHooks && utils_1.isMochaAllHooks(hook.title)) {
            return;
        }
        this.onTestStart(hook);
    }
    onHookEnd(hook) {
        if (!hook.parent || !this._allure.getCurrentSuite() || (this._options.disableMochaHooks && !utils_1.isMochaAllHooks(hook.title) && !this._allure.getCurrentTest())) {
            return false;
        }
        if (this._options.disableMochaHooks && utils_1.isMochaEachHooks(hook.title)) {
            if (hook.error) {
                this._allure.endStep('failed');
            }
            else {
                this._allure.endStep('passed');
            }
            return;
        }
        if (hook.error) {
            if (this._options.disableMochaHooks && utils_1.isMochaAllHooks(hook.title)) {
                this.onTestStart(hook);
                this.attachScreenshot();
            }
            this.onTestFail(hook);
        }
        else if (this._options.disableMochaHooks || this._options.useCucumberStepReporter) {
            if (!utils_1.isMochaAllHooks(hook.title)) {
                this.onTestPass();
                if (this._allure.getCurrentTest().steps.length === 0 && !this._options.useCucumberStepReporter) {
                    this._allure.getCurrentSuite().testcases.pop();
                }
                else if (this._options.useCucumberStepReporter) {
                    const step = this._allure.getCurrentTest().steps.pop();
                    if (step && step.attachments.length >= 1) {
                        step.attachments.forEach(attachment => {
                            this._allure.getCurrentTest().addAttachment(attachment);
                        });
                    }
                }
            }
        }
        else if (!this._options.disableMochaHooks)
            this.onTestPass();
    }
    addLabel({ name, value }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        test.addLabel(name, value);
    }
    addStory({ storyName }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        test.addLabel('story', storyName);
    }
    addFeature({ featureName }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        test.addLabel('feature', featureName);
    }
    addSeverity({ severity }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        test.addLabel('severity', severity);
    }
    addIssue({ issue }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        const issueLink = utils_1.getLinkByTemplate(this._options.issueLinkTemplate, issue);
        test.addLabel('issue', issueLink);
    }
    addTestId({ testId }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        const tmsLink = utils_1.getLinkByTemplate(this._options.tmsLinkTemplate, testId);
        test.addLabel('testId', tmsLink);
    }
    addEnvironment({ name, value }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        test.addParameter('environment-variable', name, value);
    }
    addDescription({ description, descriptionType }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        test.setDescription(description, descriptionType);
    }
    addAttachment({ name, content, type = 'text/plain' }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        if (type === 'application/json') {
            this.dumpJSON(name, content);
        }
        else {
            this._allure.addAttachment(name, Buffer.from(content), type);
        }
    }
    startStep(title) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        this._allure.startStep(title);
    }
    endStep(status) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        this._allure.endStep(status);
    }
    addStep({ step }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        this.startStep(step.title);
        if (step.attachment) {
            this.addAttachment(step.attachment);
        }
        this.endStep(step.status);
    }
    addArgument({ name, value }) {
        if (!this.isAnyTestRunning()) {
            return false;
        }
        const test = this._allure.getCurrentTest();
        test.addParameter('argument', name, value);
    }
    isAnyTestRunning() {
        return this._allure.getCurrentSuite() && this._allure.getCurrentTest();
    }
    isScreenshotCommand(command) {
        const isScrenshotEndpoint = /\/session\/[^/]*(\/element\/[^/]*)?\/screenshot/;
        return ((command.endpoint && isScrenshotEndpoint.test(command.endpoint)) ||
            command.command === 'takeScreenshot');
    }
    dumpJSON(name, json) {
        const content = JSON.stringify(json, null, 2);
        const isStr = typeof content === 'string';
        this._allure.addAttachment(name, isStr ? content : `${content}`, isStr ? 'application/json' : 'text/plain');
    }
    attachScreenshot() {
        if (this._lastScreenshot && !this._options.disableWebdriverScreenshotsReporting) {
            this._allure.addAttachment('Screenshot', Buffer.from(this._lastScreenshot, 'base64'));
            this._lastScreenshot = undefined;
        }
    }
}
AllureReporter.addFeature = (featureName) => {
    utils_1.tellReporter(constants_1.events.addFeature, { featureName });
};
AllureReporter.addLabel = (name, value) => {
    utils_1.tellReporter(constants_1.events.addLabel, { name, value });
};
AllureReporter.addSeverity = (severity) => {
    utils_1.tellReporter(constants_1.events.addSeverity, { severity });
};
AllureReporter.addIssue = (issue) => {
    utils_1.tellReporter(constants_1.events.addIssue, { issue });
};
AllureReporter.addTestId = (testId) => {
    utils_1.tellReporter(constants_1.events.addTestId, { testId });
};
AllureReporter.addStory = (storyName) => {
    utils_1.tellReporter(constants_1.events.addStory, { storyName });
};
AllureReporter.addEnvironment = (name, value) => {
    utils_1.tellReporter(constants_1.events.addEnvironment, { name, value });
};
AllureReporter.addDescription = (description, descriptionType) => {
    utils_1.tellReporter(constants_1.events.addDescription, { description, descriptionType });
};
AllureReporter.addAttachment = (name, content, type) => {
    if (!type) {
        type = content instanceof Buffer ? 'image/png' : typeof content === 'string' ? 'text/plain' : 'application/json';
    }
    utils_1.tellReporter(constants_1.events.addAttachment, { name, content, type });
};
AllureReporter.startStep = (title) => {
    utils_1.tellReporter(constants_1.events.startStep, title);
};
AllureReporter.endStep = (status = 'passed') => {
    if (!Object.values(constants_1.stepStatuses).includes(status)) {
        throw new Error(`Step status must be ${Object.values(constants_1.stepStatuses).join(' or ')}. You tried to set "${status}"`);
    }
    utils_1.tellReporter(constants_1.events.endStep, status);
};
AllureReporter.addStep = (title, { content, name = 'attachment', type = 'text/plain' } = {}, status = 'passed') => {
    if (!Object.values(constants_1.stepStatuses).includes(status)) {
        throw new Error(`Step status must be ${Object.values(constants_1.stepStatuses).join(' or ')}. You tried to set "${status}"`);
    }
    const step = content ? { title, attachment: { content, name, type }, status } : { title, status };
    utils_1.tellReporter(constants_1.events.addStep, { step });
};
AllureReporter.addArgument = (name, value) => {
    utils_1.tellReporter(constants_1.events.addArgument, { name, value });
};
exports.default = AllureReporter;
