export default adapterFactory;
export namespace adapterFactory {
    function init(...args: any[]): Promise<CucumberAdapter>;
}
export class CucumberAdapter {
    constructor(cid: any, config: any, specs: any, capabilities: any, reporter: any);
    cwd: string;
    cid: any;
    specs: any;
    reporter: any;
    capabilities: any;
    config: any;
    cucumberOpts: any;
    _hasTests: boolean;
    cucumberFeaturesWithLineNumbers: any;
    eventBroadcaster: EventEmitter;
    init(): Promise<CucumberAdapter>;
    cucumberReporter: CucumberReporter | undefined;
    testCases: any;
    hasTests(): boolean;
    run(): Promise<number>;
    getCurrentStep: (() => any) | undefined;
    filter(testCase: any): boolean;
    registerRequiredModules(): void;
    requiredFiles(): any;
    loadSpecFiles(): void;
    addWdioHooks(config: object): void;
    wrapSteps(config: object): void;
    wrapStep(code: Function, retryTest: number | undefined, isStep: boolean, config: object, cid: string, getCurrentStep: Function): Function;
}
import { EventEmitter } from "node/events";
import CucumberReporter from "./reporter";
//# sourceMappingURL=index.d.ts.map