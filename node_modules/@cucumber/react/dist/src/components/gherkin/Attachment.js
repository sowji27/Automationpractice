"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var messages_1 = require("@cucumber/messages");
var ErrorMessage_1 = __importDefault(require("./ErrorMessage"));
var free_solid_svg_icons_1 = require("@fortawesome/free-solid-svg-icons");
var react_fontawesome_1 = require("@fortawesome/react-fontawesome");
// @ts-ignore
var ansi_to_html_1 = __importDefault(require("ansi-to-html"));
var Attachment = function (_a) {
    var attachment = _a.attachment;
    if (attachment.mediaType.match(/^image\//)) {
        return image(attachment);
    }
    else if (attachment.mediaType.match(/^video\//)) {
        return video(attachment);
    }
    else if (attachment.mediaType == 'text/x.cucumber.log+plain') {
        return text(attachment, prettyANSI, true);
    }
    else if (attachment.mediaType.match(/^text\//)) {
        return text(attachment, function (s) { return s; }, false);
    }
    else if (attachment.mediaType.match(/^application\/json/)) {
        return text(attachment, prettyJSON, false);
    }
    else {
        return (react_1.default.createElement(ErrorMessage_1.default, { message: "Couldn't display " + attachment.mediaType + " attachment because the media type is unsupported. Please submit a feature request at https://github.com/cucumber/cucumber/issues" }));
    }
};
function image(attachment) {
    if (attachment.contentEncoding !== messages_1.messages.Attachment.ContentEncoding.BASE64) {
        return (react_1.default.createElement(ErrorMessage_1.default, { className: "cucumber-attachment", message: "Couldn't display " + attachment.mediaType + " image because it wasn't base64 encoded" }));
    }
    return (react_1.default.createElement("details", null,
        react_1.default.createElement("summary", null, "Attached Image"),
        react_1.default.createElement("img", { alt: "Embedded Image", src: "data:" + attachment.mediaType + ";base64," + attachment.body, className: "cucumber-attachment cucumber-attachment__image" })));
}
function video(attachment) {
    if (attachment.contentEncoding !== messages_1.messages.Attachment.ContentEncoding.BASE64) {
        return (react_1.default.createElement(ErrorMessage_1.default, { className: "cucumber-attachment", message: "Couldn't display " + attachment.mediaType + " video because it wasn't base64 encoded" }));
    }
    return (react_1.default.createElement("details", null,
        react_1.default.createElement("summary", null, "Attached Video"),
        react_1.default.createElement("video", { controls: true },
            react_1.default.createElement("source", { src: "data:" + attachment.mediaType + ";base64," + attachment.body }),
            "Your browser is unable to display video")));
}
function base64Decode(body) {
    // @ts-ignore
    if (typeof global.atob === 'function') {
        // @ts-ignore
        return global.atob(body);
    }
    else if (typeof global.Buffer === 'function') {
        return global.Buffer.from(body, 'base64').toString('utf8');
    }
    else {
        throw new Error();
    }
}
function text(attachment, prettify, dangerouslySetInnerHTML) {
    var body = attachment.contentEncoding === messages_1.messages.Attachment.ContentEncoding.IDENTITY
        ? attachment.body
        : base64Decode(attachment.body);
    if (dangerouslySetInnerHTML) {
        return (react_1.default.createElement("pre", { className: "cucumber-attachment cucumber-attachment__text" },
            react_1.default.createElement(react_fontawesome_1.FontAwesomeIcon, { icon: free_solid_svg_icons_1.faPaperclip, className: "cucumber-attachment__icon" }),
            react_1.default.createElement("span", { dangerouslySetInnerHTML: { __html: prettify(body) } })));
    }
    return (react_1.default.createElement("pre", { className: "cucumber-attachment cucumber-attachment__text" },
        react_1.default.createElement(react_fontawesome_1.FontAwesomeIcon, { icon: free_solid_svg_icons_1.faPaperclip, className: "cucumber-attachment__icon" }),
        prettify(body)));
}
function prettyJSON(s) {
    try {
        return JSON.stringify(JSON.parse(s), null, 2);
    }
    catch (ignore) {
        return s;
    }
}
function prettyANSI(s) {
    return new ansi_to_html_1.default().toHtml(s);
}
exports.default = Attachment;
//# sourceMappingURL=Attachment.js.map