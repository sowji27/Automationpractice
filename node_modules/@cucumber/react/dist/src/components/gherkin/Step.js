"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var DataTable_1 = __importDefault(require("./DataTable"));
var Keyword_1 = __importDefault(require("./Keyword"));
var DocString_1 = __importDefault(require("./DocString"));
var CucumberQueryContext_1 = __importDefault(require("../../CucumberQueryContext"));
var GherkinQueryContext_1 = __importDefault(require("../../GherkinQueryContext"));
var ErrorMessage_1 = __importDefault(require("./ErrorMessage"));
var StepContainer_1 = __importDefault(require("./StepContainer"));
var Attachment_1 = __importDefault(require("./Attachment"));
var HighLight_1 = __importDefault(require("../app/HighLight"));
var Step = function (_a) {
    var step = _a.step, renderStepMatchArguments = _a.renderStepMatchArguments, renderMessage = _a.renderMessage;
    var gherkinQuery = react_1.default.useContext(GherkinQueryContext_1.default);
    var cucumberQuery = react_1.default.useContext(CucumberQueryContext_1.default);
    var pickleStepIds = gherkinQuery.getPickleStepIds(step.id);
    var pickleStepTestStepResults = cucumberQuery.getPickleStepTestStepResults(pickleStepIds);
    var testStepResult = cucumberQuery.getWorstTestStepResult(pickleStepTestStepResults);
    var attachments = cucumberQuery.getPickleStepAttachments(pickleStepIds);
    var stepTextElements = [];
    if (renderStepMatchArguments) {
        var stepMatchArgumentsLists = pickleStepIds.length === 0
            ? // This can happen in rare cases for background steps in a document that only has step-less scenarios,
                // because background steps are not added to the pickle when the scenario has no steps. In this case
                // the background step will be rendered as undefined (even if there are matching step definitions). This
                // is not ideal, but it is rare enough that we don't care about it for now.
                []
            : cucumberQuery.getStepMatchArgumentsLists(pickleStepIds[0]) || [];
        if (stepMatchArgumentsLists.length === 1) {
            // Step is defined
            var stepMatchArguments = stepMatchArgumentsLists[0].stepMatchArguments;
            var offset_1 = 0;
            var plain_1;
            stepMatchArguments.forEach(function (argument, index) {
                plain_1 = step.text.slice(offset_1, argument.group.start);
                if (plain_1.length > 0) {
                    stepTextElements.push(react_1.default.createElement("span", { className: "cucumber-step__text", key: "plain-" + index },
                        react_1.default.createElement(HighLight_1.default, { text: plain_1 })));
                }
                var arg = argument.group.value;
                if (arg.length > 0) {
                    stepTextElements.push(react_1.default.createElement("a", { className: "cucumber-step__param", key: "bold-" + index, title: argument.parameterTypeName },
                        react_1.default.createElement(HighLight_1.default, { text: arg })));
                }
                offset_1 += plain_1.length + arg.length;
            });
            plain_1 = step.text.slice(offset_1);
            if (plain_1.length > 0) {
                stepTextElements.push(react_1.default.createElement("span", { className: "cucumber-step__text", key: "plain-rest" },
                    react_1.default.createElement(HighLight_1.default, { text: plain_1 })));
            }
        }
        else if (stepMatchArgumentsLists.length >= 2) {
            // Step is ambiguous
            stepTextElements.push(react_1.default.createElement("span", { className: "cucumber-step__text", key: "plain-ambiguous" },
                react_1.default.createElement(HighLight_1.default, { text: step.text })));
        }
        else {
            // Step is undefined
            stepTextElements.push(react_1.default.createElement("span", { className: "cucumber-step__text", key: "plain-undefined" },
                react_1.default.createElement(HighLight_1.default, { text: step.text })));
        }
    }
    else {
        // Step is from scenario with examples, and has <> placeholders.
        stepTextElements.push(react_1.default.createElement("span", { className: "cucumber-step__text", key: "plain-placeholders" },
            react_1.default.createElement(HighLight_1.default, { text: step.text })));
    }
    return (react_1.default.createElement(StepContainer_1.default, { status: testStepResult.status },
        react_1.default.createElement("h3", { className: "cucumber-step__title" },
            react_1.default.createElement(Keyword_1.default, { className: "cucumber-step__keyword" }, step.keyword),
            stepTextElements),
        step.dataTable && react_1.default.createElement(DataTable_1.default, { dataTable: step.dataTable }),
        step.docString && react_1.default.createElement(DocString_1.default, { docString: step.docString }),
        renderMessage && testStepResult.message && (react_1.default.createElement(ErrorMessage_1.default, { message: testStepResult.message })),
        react_1.default.createElement("div", { className: "cucumber-attachments" }, attachments.map(function (attachment, i) { return (react_1.default.createElement(Attachment_1.default, { key: i, attachment: attachment })); }))));
};
exports.default = Step;
//# sourceMappingURL=Step.js.map