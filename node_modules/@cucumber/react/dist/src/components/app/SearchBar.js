"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var free_solid_svg_icons_1 = require("@fortawesome/free-solid-svg-icons");
var react_fontawesome_1 = require("@fortawesome/react-fontawesome");
var SearchQueryContext_1 = __importDefault(require("../../SearchQueryContext"));
var messages_1 = require("@cucumber/messages");
var statusName_1 = __importDefault(require("../gherkin/statusName"));
var SearchBar = function (_a) {
    var queryUpdated = _a.queryUpdated, statusesUpdated = _a.statusesUpdated, enabledStatuses = _a.enabledStatuses, scenarioCountByStatus = _a.scenarioCountByStatus;
    var searchQueryContext = react_1.default.useContext(SearchQueryContext_1.default);
    var statuses = [
        messages_1.messages.TestStepFinished.TestStepResult.Status.AMBIGUOUS,
        messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
        messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
        messages_1.messages.TestStepFinished.TestStepResult.Status.PENDING,
        messages_1.messages.TestStepFinished.TestStepResult.Status.SKIPPED,
        messages_1.messages.TestStepFinished.TestStepResult.Status.UNDEFINED,
        messages_1.messages.TestStepFinished.TestStepResult.Status.UNKNOWN,
    ];
    var updateQueryOnEnter = function (event) {
        if (event.key === 'Enter') {
            queryUpdated(searchQueryContext.query);
            event.preventDefault();
        }
    };
    var showFilters = scenarioCountByStatus.size > 1 ||
        scenarioCountByStatus.has(messages_1.messages.TestStepFinished.TestStepResult.Status.UNKNOWN);
    return (react_1.default.createElement("div", { className: "cucumber-search-bar" },
        react_1.default.createElement("form", { className: "cucumber-search-bar-search" },
            react_1.default.createElement("input", { type: "text", placeholder: "Some text or @tags", onKeyPress: updateQueryOnEnter, onChange: function (event) { return (searchQueryContext.query = event.target.value); } }),
            react_1.default.createElement("button", { type: "submit", onClick: function () { return queryUpdated(searchQueryContext.query); }, value: "search" },
                react_1.default.createElement(react_fontawesome_1.FontAwesomeIcon, { icon: free_solid_svg_icons_1.faSearch }))),
        react_1.default.createElement("p", { className: "help" },
            react_1.default.createElement(react_fontawesome_1.FontAwesomeIcon, { icon: free_solid_svg_icons_1.faQuestionCircle }),
            "\u00A0 You can use either plain text for the search or \u00A0",
            react_1.default.createElement("a", { href: "https://cucumber.io/docs/cucumber/api/#tag-expressions" }, "cucumber tag expressions"),
            "\u00A0 to filter the output."),
        showFilters && (react_1.default.createElement("form", { className: "cucumber-search-bar-filter" },
            react_1.default.createElement("span", null,
                react_1.default.createElement(react_fontawesome_1.FontAwesomeIcon, { icon: free_solid_svg_icons_1.faFilter }),
                " Filter by scenario status:"),
            react_1.default.createElement("ul", null, statuses.map(function (status, index) {
                var name = statusName_1.default(status);
                var enabled = enabledStatuses.includes(status);
                var inputId = "filter-status-" + name;
                if (scenarioCountByStatus.get(status) === undefined) {
                    return;
                }
                return (react_1.default.createElement("li", { key: index },
                    react_1.default.createElement("input", { id: inputId, type: "checkbox", defaultChecked: enabled, onChange: function () {
                            if (enabledStatuses.includes(status)) {
                                statusesUpdated(enabledStatuses.filter(function (s) { return s !== status; }));
                            }
                            else {
                                statusesUpdated([status].concat(enabledStatuses));
                            }
                        } }),
                    react_1.default.createElement("label", { htmlFor: inputId }, name)));
            }))))));
};
exports.default = SearchBar;
//# sourceMappingURL=SearchBar.js.map