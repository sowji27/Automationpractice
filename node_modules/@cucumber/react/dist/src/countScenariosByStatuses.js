"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var gherkin_utils_1 = require("@cucumber/gherkin-utils");
function countScenariosByStatuses(gherkinDocuments, gherkinQuery, cucumberQuery) {
    var e_1, _a;
    var statuses = new Map();
    var _loop_1 = function (gherkinDocument) {
        var counter = new gherkin_utils_1.GherkinDocumentWalker({}, {
            handleScenario: function (scenario) {
                var pickleIds = gherkinQuery.getPickleIds(gherkinDocument.uri, scenario.id);
                pickleIds.forEach(function (pickleId) {
                    var status = cucumberQuery.getWorstTestStepResult(cucumberQuery.getPickleTestStepResults([pickleId])).status;
                    if (statuses.has(status)) {
                        statuses.set(status, statuses.get(status) + 1);
                    }
                    else {
                        statuses.set(status, 1);
                    }
                });
            },
        });
        counter.walkGherkinDocument(gherkinDocument);
    };
    try {
        for (var gherkinDocuments_1 = __values(gherkinDocuments), gherkinDocuments_1_1 = gherkinDocuments_1.next(); !gherkinDocuments_1_1.done; gherkinDocuments_1_1 = gherkinDocuments_1.next()) {
            var gherkinDocument = gherkinDocuments_1_1.value;
            _loop_1(gherkinDocument);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (gherkinDocuments_1_1 && !gherkinDocuments_1_1.done && (_a = gherkinDocuments_1.return)) _a.call(gherkinDocuments_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return statuses;
}
exports.default = countScenariosByStatuses;
//# sourceMappingURL=countScenariosByStatuses.js.map