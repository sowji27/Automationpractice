"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var multimaps_1 = require("@teppeis/multimaps");
var tag_expressions_1 = __importDefault(require("@cucumber/tag-expressions"));
var gherkin_utils_1 = require("@cucumber/gherkin-utils");
var TagSearch = /** @class */ (function () {
    function TagSearch(gherkinQuery) {
        this.gherkinQuery = gherkinQuery;
        this.pickleById = new Map();
        this.picklesByScenarioId = new multimaps_1.ArrayMultimap();
        this.gherkinDocuments = [];
    }
    TagSearch.prototype.search = function (query) {
        var _this = this;
        var expressionNode = tag_expressions_1.default(query);
        var tagFilters = {
            acceptScenario: function (scenario) {
                var e_1, _a;
                var pickles = _this.picklesByScenarioId.get(scenario.id);
                try {
                    for (var pickles_1 = __values(pickles), pickles_1_1 = pickles_1.next(); !pickles_1_1.done; pickles_1_1 = pickles_1.next()) {
                        var pickle = pickles_1_1.value;
                        var tags = pickle.tags.map(function (tag) { return tag.name; });
                        if (expressionNode.evaluate(tags)) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (pickles_1_1 && !pickles_1_1.done && (_a = pickles_1.return)) _a.call(pickles_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return false;
            },
        };
        var filters = __assign(__assign({}, gherkin_utils_1.rejectAllFilters), tagFilters);
        var astWalker = new gherkin_utils_1.GherkinDocumentWalker(filters);
        return this.gherkinDocuments
            .map(function (gherkinDocument) { return astWalker.walkGherkinDocument(gherkinDocument); })
            .filter(function (gherkinDocument) { return gherkinDocument !== null; });
    };
    TagSearch.prototype.add = function (gherkinDocument) {
        var _this = this;
        this.gherkinDocuments.push(gherkinDocument);
        var pickles = this.gherkinQuery.getPickles();
        pickles.forEach(function (pickle) { return _this.pickleById.set(pickle.id, pickle); });
        var astWalker = new gherkin_utils_1.GherkinDocumentWalker({}, {
            handleScenario: function (scenario) {
                var pickleIds = _this.gherkinQuery.getPickleIds(gherkinDocument.uri, scenario.id);
                pickleIds.map(function (pickleId) {
                    return _this.picklesByScenarioId.put(scenario.id, _this.pickleById.get(pickleId));
                });
            },
        });
        astWalker.walkGherkinDocument(gherkinDocument);
    };
    return TagSearch;
}());
exports.default = TagSearch;
//# sourceMappingURL=TagSearch.js.map