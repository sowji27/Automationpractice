"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var toRepositoryId_1 = __importDefault(require("../src/toRepositoryId"));
var testData = [
    ['github.com/owner/name', 'https://github.com/owner/name'],
    ['github.com/owner/name', 'git+ssh://git@github.com/owner/name.git'],
    ['github.com/owner/name', 'git@github.com:owner/name.git'],
];
describe('#parseGitUrl', function () {
    var e_1, _a;
    var _loop_1 = function (expected, url) {
        it("parses " + url + " to " + expected, function () {
            var repositoryId = toRepositoryId_1.default(url);
            assert_1.default.strictEqual(repositoryId, expected);
        });
    };
    try {
        for (var testData_1 = __values(testData), testData_1_1 = testData_1.next(); !testData_1_1.done; testData_1_1 = testData_1.next()) {
            var _b = __read(testData_1_1.value, 2), expected = _b[0], url = _b[1];
            _loop_1(expected, url);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (testData_1_1 && !testData_1_1.done && (_a = testData_1.return)) _a.call(testData_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
});
//# sourceMappingURL=parseGitUrlTest.js.map