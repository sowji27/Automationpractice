"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var ts_sinon_1 = require("ts-sinon");
var messages_1 = require("@cucumber/messages");
var GherkinDocument = messages_1.messages.GherkinDocument;
var query_1 = require("@cucumber/query");
var gherkin_1 = require("@cucumber/gherkin");
var gherkin_utils_1 = require("@cucumber/gherkin-utils");
var fs_1 = __importDefault(require("fs"));
var hidePassedScenarios_1 = __importDefault(require("../src/hidePassedScenarios"));
var fake_cucumber_1 = require("@cucumber/fake-cucumber");
var glob_1 = require("glob");
describe('hidePassedScenarios', function () {
    it('returns an empty array if no documents are provided', function () {
        var testResultsQuery = new query_1.Query();
        var gherkinQuery = new gherkin_utils_1.Query();
        assert_1.default.deepStrictEqual(hidePassedScenarios_1.default([], testResultsQuery, gherkinQuery), []);
    });
    it('keeps documents which do not have a passed status', function () {
        var document = new GherkinDocument();
        var testResultsQuery = ts_sinon_1.stubObject(new query_1.Query());
        testResultsQuery.getWorstTestStepResult.returns(new messages_1.messages.TestStepFinished.TestStepResult({
            status: messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
        }));
        testResultsQuery.getPickleTestStepResults.returns([]);
        var gherkinQuery = ts_sinon_1.stubObject(new gherkin_utils_1.Query());
        gherkinQuery.getPickleIds.returns([]);
        assert_1.default.deepStrictEqual(hidePassedScenarios_1.default([document], testResultsQuery, gherkinQuery), [document]);
    });
    it('removes documents which do have a passed status', function () {
        var document = new GherkinDocument();
        var testResultsQuery = ts_sinon_1.stubObject(new query_1.Query());
        testResultsQuery.getWorstTestStepResult.returns(new messages_1.messages.TestStepFinished.TestStepResult({
            status: messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
        }));
        testResultsQuery.getPickleTestStepResults.returns([]);
        var gherkinQuery = ts_sinon_1.stubObject(new gherkin_utils_1.Query());
        gherkinQuery.getPickleIds.returns([]);
        assert_1.default.deepStrictEqual(hidePassedScenarios_1.default([document], testResultsQuery, gherkinQuery), []);
    });
    it('can process multiple documents and statuses', function () { return __awaiter(void 0, void 0, void 0, function () {
        var supportCode, featureFiles, gherkinStream, gherkinQuery, cucumberQuery, cucumberQueryStream, gherkinDocuments, expectedFeatureFiles;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    supportCode = new fake_cucumber_1.SupportCode();
                    // Make one of the scenarios pass so it's filtered out
                    supportCode.defineStepDefinition(messages_1.messages.SourceReference.create({
                        uri: __filename,
                        location: { column: 1, line: 1 },
                    }), 'I have {int} cukes in my belly', function (cukeCount) {
                        assert_1.default(cukeCount);
                    });
                    featureFiles = glob_1.glob
                        .sync('../../compatibility-kit/javascript/features/**/*.feature')
                        .sort();
                    gherkinStream = gherkin_1.GherkinStreams.fromPaths(featureFiles, {
                        newId: messages_1.IdGenerator.incrementing(),
                        createReadStream: function (filePath) {
                            return fs_1.default.createReadStream(filePath, { encoding: 'utf-8' });
                        },
                    });
                    gherkinQuery = new gherkin_utils_1.Query();
                    cucumberQuery = new query_1.Query();
                    cucumberQueryStream = new query_1.QueryStream(cucumberQuery);
                    return [4 /*yield*/, fake_cucumber_1.runCucumber(supportCode, gherkinStream, gherkinQuery, cucumberQueryStream)];
                case 1:
                    _a.sent();
                    gherkinDocuments = gherkinQuery.getGherkinDocuments();
                    expectedFeatureFiles = featureFiles.filter(function (path) {
                        return path !==
                            '../../compatibility-kit/javascript/features/minimal/minimal.feature';
                    });
                    assert_1.default.notDeepStrictEqual(featureFiles, expectedFeatureFiles);
                    assert_1.default.deepStrictEqual(hidePassedScenarios_1.default(gherkinDocuments, cucumberQuery, gherkinQuery)
                        .map(function (document) { return document.uri; })
                        .sort(), expectedFeatureFiles);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=hidePassedScenariosTest.js.map