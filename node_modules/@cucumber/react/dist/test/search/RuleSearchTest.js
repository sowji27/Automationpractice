"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var RuleSearch_1 = __importDefault(require("../../src/search/RuleSearch"));
var utils_1 = require("./utils");
describe('RuleSearch', function () {
    var ruleSearch;
    var rules;
    beforeEach(function () {
        var e_1, _a;
        ruleSearch = new RuleSearch_1.default();
        rules = [
            utils_1.makeRule('first rule', 'a little description', []),
            utils_1.makeRule('second rule', 'a long description', []),
            utils_1.makeRule('third rule', 'description', []),
        ];
        try {
            for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                var rule = rules_1_1.value;
                ruleSearch.add(rule);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    context('#search', function () {
        it('returns an empty list when there is no hits', function () {
            var searchResults = ruleSearch.search('no match there');
            assert_1.default.deepStrictEqual(searchResults, []);
        });
        it('returns rule which name match the query', function () {
            var searchResults = ruleSearch.search('second');
            assert_1.default.deepStrictEqual(searchResults, [rules[1]]);
        });
        it('returns rule which name match the query in description', function () {
            var searchResults = ruleSearch.search('little');
            assert_1.default.deepStrictEqual(searchResults, [rules[0]]);
        });
    });
});
//# sourceMappingURL=RuleSearchTest.js.map