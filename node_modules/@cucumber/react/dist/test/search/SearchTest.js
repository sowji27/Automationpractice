"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var gherkin_1 = require("@cucumber/gherkin");
var Search_1 = __importDefault(require("../../src/search/Search"));
var gherkin_utils_1 = require("@cucumber/gherkin-utils");
describe('Search', function () {
    var search;
    var gherkinQuery;
    var feature = "Feature: Solar System\n\n  @planet\n  Scenario: Earth\n    Given is the sixth planet from the Sun\n\n  @dwarf\n  Scenario: Pluto\n    Given it is not really a planet\n";
    beforeEach(function () {
        gherkinQuery = new gherkin_utils_1.Query();
        search = new Search_1.default(gherkinQuery);
    });
    function prettyResults(feature, query) {
        var e_1, _a, e_2, _b;
        var envelopes = gherkin_1.generateMessages(feature, 'test.feature', {
            includeGherkinDocument: true,
            includePickles: true,
            includeSource: true,
            newId: messages_1.IdGenerator.incrementing(),
        });
        try {
            for (var envelopes_1 = __values(envelopes), envelopes_1_1 = envelopes_1.next(); !envelopes_1_1.done; envelopes_1_1 = envelopes_1.next()) {
                var envelope = envelopes_1_1.value;
                gherkinQuery.update(envelope);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (envelopes_1_1 && !envelopes_1_1.done && (_a = envelopes_1.return)) _a.call(envelopes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var envelopes_2 = __values(envelopes), envelopes_2_1 = envelopes_2.next(); !envelopes_2_1.done; envelopes_2_1 = envelopes_2.next()) {
                var envelope = envelopes_2_1.value;
                if (envelope.gherkinDocument) {
                    search.add(envelope.gherkinDocument);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (envelopes_2_1 && !envelopes_2_1.done && (_b = envelopes_2.return)) _b.call(envelopes_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return gherkin_utils_1.pretty(search.search(query)[0]);
    }
    context('search', function () {
        context('when using a tag expression query', function () {
            it('uses TagSearch to filter the results', function () {
                var results = prettyResults(feature, '@planet');
                assert_1.default.strictEqual(results, "Feature: Solar System\n\n  @planet\n  Scenario: Earth\n    Given is the sixth planet from the Sun\n");
            });
            it('does not raises error when tag expression is incorrect', function () {
                var results = prettyResults(feature, '(@planet or @dwarf))');
                assert_1.default.strictEqual(results, "Feature: Solar System\n\n  @planet\n  Scenario: Earth\n    Given is the sixth planet from the Sun\n\n  @dwarf\n  Scenario: Pluto\n    Given it is not really a planet\n");
            });
        });
        context('when using a query which is not a tag expression', function () {
            it('uses TextSearch to filter the results', function () {
                var results = prettyResults(feature, 'not really (');
                assert_1.default.strictEqual(results, "Feature: Solar System\n\n  @dwarf\n  Scenario: Pluto\n    Given it is not really a planet\n");
            });
        });
    });
});
//# sourceMappingURL=SearchTest.js.map