"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var StepSearch_1 = __importDefault(require("../../src/search/StepSearch"));
var utils_1 = require("./utils");
describe('StepSearch', function () {
    var stepSearch;
    var steps;
    beforeEach(function () {
        var e_1, _a;
        stepSearch = new StepSearch_1.default();
        steps = [
            utils_1.makeStep('Given', 'a passed step', 'There is a docstring here'),
            utils_1.makeStep('When', 'another passed step'),
            utils_1.makeStep('Then', 'a failed step', '', [
                ['name', 'value'],
                ['errorType', 'NullPointerException'],
                ['message', 'Something really bad hapenned here'],
            ]),
        ];
        try {
            for (var steps_1 = __values(steps), steps_1_1 = steps_1.next(); !steps_1_1.done; steps_1_1 = steps_1.next()) {
                var step = steps_1_1.value;
                stepSearch.add(step);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (steps_1_1 && !steps_1_1.done && (_a = steps_1.return)) _a.call(steps_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    context('#search', function () {
        it('returns an empty list when there is no hits', function () {
            var searchResults = stepSearch.search('no match there');
            assert_1.default.deepStrictEqual(searchResults, []);
        });
        it('returns step which text match the query', function () {
            var searchResults = stepSearch.search('failed');
            assert_1.default.deepStrictEqual(searchResults, [steps[2]]);
        });
        it('may not return results in the original order', function () {
            var e_2, _a;
            var searchResults = stepSearch.search('step');
            try {
                for (var steps_2 = __values(steps), steps_2_1 = steps_2.next(); !steps_2_1.done; steps_2_1 = steps_2.next()) {
                    var step = steps_2_1.value;
                    assert_1.default.ok(searchResults.includes(step));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (steps_2_1 && !steps_2_1.done && (_a = steps_2.return)) _a.call(steps_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
        it('returns step which keyword match the query', function () {
            var searchResults = stepSearch.search('Given');
            assert_1.default.deepStrictEqual(searchResults, [steps[0]]);
        });
        xit('it does not exclude "Then" and "When" from indexing', function () {
            // By default, ElasticLurn exclude some words from indexing/searching,
            // amongst them are 'Then' and 'When'.
            // See: http://elasticlunr.com/docs/stop_word_filter.js.html#resetStopWords
        });
        it('returns step which DocString matches the query', function () {
            var searchResults = stepSearch.search('docstring');
            assert_1.default.deepStrictEqual(searchResults, [steps[0]]);
        });
        it('returns step which datatable matches the query', function () {
            var searchResults = stepSearch.search('NullPointerException');
            assert_1.default.deepStrictEqual(searchResults, [steps[2]]);
        });
    });
});
//# sourceMappingURL=StepSearchTest.js.map