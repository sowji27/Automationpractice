"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var ScenarioSearch_1 = __importDefault(require("../../src/search/ScenarioSearch"));
var utils_1 = require("./utils");
describe('ScenarioSearch', function () {
    var scenarioSearch;
    var scenarios;
    beforeEach(function () {
        var e_1, _a;
        scenarioSearch = new ScenarioSearch_1.default();
        scenarios = [
            utils_1.makeScenario('a passed scenario', 'a little description', []),
            utils_1.makeScenario('another passed scenario', 'a long description of the scenario', []),
            utils_1.makeScenario('a failed scenario', 'description', []),
        ];
        try {
            for (var scenarios_1 = __values(scenarios), scenarios_1_1 = scenarios_1.next(); !scenarios_1_1.done; scenarios_1_1 = scenarios_1.next()) {
                var scenario = scenarios_1_1.value;
                scenarioSearch.add(scenario);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (scenarios_1_1 && !scenarios_1_1.done && (_a = scenarios_1.return)) _a.call(scenarios_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    context('#search', function () {
        it('returns an empty list when there is no hits', function () {
            var searchResults = scenarioSearch.search('no match there');
            assert_1.default.deepStrictEqual(searchResults, []);
        });
        it('returns scenario which name match the query', function () {
            var searchResults = scenarioSearch.search('failed');
            assert_1.default.deepStrictEqual(searchResults, [scenarios[2]]);
        });
        it('may not return results in the original order', function () {
            var e_2, _a;
            var searchResults = scenarioSearch.search('scenario');
            try {
                for (var scenarios_2 = __values(scenarios), scenarios_2_1 = scenarios_2.next(); !scenarios_2_1.done; scenarios_2_1 = scenarios_2.next()) {
                    var scenario = scenarios_2_1.value;
                    assert_1.default.ok(searchResults.includes(scenario));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (scenarios_2_1 && !scenarios_2_1.done && (_a = scenarios_2.return)) _a.call(scenarios_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
        it('returns scenario which description match the query', function () {
            var searchResults = scenarioSearch.search('little');
            assert_1.default.deepStrictEqual(searchResults, [scenarios[0]]);
        });
    });
});
//# sourceMappingURL=ScenarioSearchTest.js.map