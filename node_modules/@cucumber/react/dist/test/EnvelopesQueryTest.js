"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var EnvelopesQueryContext_1 = require("../src/EnvelopesQueryContext");
var messages_1 = require("@cucumber/messages");
var assert_1 = __importDefault(require("assert"));
describe('EnvelopesQuery', function () {
    var query;
    var envelopes = [
        messages_1.messages.Envelope.create({
            meta: messages_1.messages.Meta.create({
                protocolVersion: 'X.Y.Z',
            }),
        }),
        messages_1.messages.Envelope.create({
            gherkinDocument: messages_1.messages.GherkinDocument.create({
                uri: 'some/gherkin_document',
            }),
        }),
        messages_1.messages.Envelope.create({
            pickle: messages_1.messages.Pickle.create({
                id: '1',
            }),
        }),
        messages_1.messages.Envelope.create({
            pickle: messages_1.messages.Pickle.create({
                id: '2',
            }),
        }),
        messages_1.messages.Envelope.create({
            pickle: messages_1.messages.Pickle.create({
                id: '3',
            }),
        }),
    ];
    beforeEach(function () {
        var e_1, _a;
        query = new EnvelopesQueryContext_1.EnvelopesQuery();
        try {
            for (var envelopes_1 = __values(envelopes), envelopes_1_1 = envelopes_1.next(); !envelopes_1_1.done; envelopes_1_1 = envelopes_1.next()) {
                var envelope = envelopes_1_1.value;
                query.update(envelope);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (envelopes_1_1 && !envelopes_1_1.done && (_a = envelopes_1.return)) _a.call(envelopes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    context('find', function () {
        it('returns undefined when no envelope matches', function () {
            assert_1.default.strictEqual(query.find(function (env) { return env.hook !== null; }), undefined);
        });
        it('returns the first matching envelope', function () {
            assert_1.default.strictEqual(query.find(function (env) { return env.meta !== null; }), envelopes[0]);
        });
        it('returns the first matching envelope even when there are multiple matches', function () {
            assert_1.default.strictEqual(query.find(function (env) { return env.pickle !== null; }), envelopes[2]);
        });
    });
    context('filter', function () {
        it('returns an empty list when there are no match', function () {
            assert_1.default.deepStrictEqual(query.filter(function (env) { return env.hook !== null; }), []);
        });
        it('returns all matching envelopes', function () {
            assert_1.default.deepStrictEqual(query.filter(function (env) { return env.pickle !== null; }), envelopes.slice(2));
        });
    });
});
//# sourceMappingURL=EnvelopesQueryTest.js.map