"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var is_tag_expression_1 = __importDefault(require("../src/is_tag_expression"));
describe('isTagExpression', function () {
    it('returns false with empty string', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default(''), false);
    });
    it('returns false when there is no tag in the expression', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default('Something'), false);
    });
    it('returns true when with a tag', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default('@something'), true);
    });
    it('is pretty permisive on what a tag is', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default('@&é"(§è!çà)-'), true);
    });
    it('accepts spaces arounds the tag', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default('  @something  '), true);
    });
    it('recognises "and", "or" and "not" keywords', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default('@2b or not @2b'), true);
        assert_1.default.strictEqual(is_tag_expression_1.default('@turner and @hootch'), true);
    });
    it('needs non-keyords to be tags to be recognized as tag expressions', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default('2b or not 2b'), false);
        assert_1.default.strictEqual(is_tag_expression_1.default('turner and hootch'), false);
    });
    it('accepts parenthesis in an expression', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default('(@2b or not @2b) and @true'), true);
    });
    it('does not ensure parenthesis are correctly written that said ...', function () {
        assert_1.default.strictEqual(is_tag_expression_1.default('((((@2b or )not @2b) and @true'), true);
    });
});
//# sourceMappingURL=is_tag_expressionTest.js.map