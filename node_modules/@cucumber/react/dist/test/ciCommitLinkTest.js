"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var messages_1 = require("@cucumber/messages");
var ciCommitLink_1 = __importDefault(require("../src/ciCommitLink"));
describe('ciCommitLink(ci)', function () {
    context('when executed on GitHubAction', function () {
        it('returns a link to the commit view on GitHub', function () {
            var ci = messages_1.messages.Meta.CI.create({
                name: 'GitHub Actions',
                url: 'http://anywhere',
                git: messages_1.messages.Meta.CI.Git.create({
                    remote: 'git@github.example.com:company/repo.git',
                    revision: 'some-sha',
                }),
            });
            assert_1.default.strictEqual(ciCommitLink_1.default(ci), 'https://github.example.com/company/repo/commit/some-sha');
        });
    });
    context('when remote startss with github.com', function () {
        it('returns a link to the commit view on GitHub', function () {
            var ci = messages_1.messages.Meta.CI.create({
                name: 'CircleCI',
                url: 'http://anywhere',
                git: messages_1.messages.Meta.CI.Git.create({
                    remote: 'https://github.com/company/repo.git',
                    revision: 'some-sha',
                }),
            });
            assert_1.default.strictEqual(ciCommitLink_1.default(ci), 'https://github.com/company/repo/commit/some-sha');
        });
    });
    context('when git is not specified', function () {
        it('returns undefined', function () {
            var ci = messages_1.messages.Meta.CI.create();
            assert_1.default.strictEqual(ciCommitLink_1.default(ci), null);
        });
    });
});
//# sourceMappingURL=ciCommitLinkTest.js.map