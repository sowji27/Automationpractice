"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var react_dom_1 = __importDefault(require("react-dom"));
var react_1 = __importDefault(require("react"));
var HighLight_1 = __importDefault(require("../src/components/app/HighLight"));
var jsdom_1 = require("jsdom");
var SearchQueryContext_1 = __importDefault(require("../src/SearchQueryContext"));
describe('HighLight', function () {
    function renderHighlight(text, query, markdown) {
        var dom = new jsdom_1.JSDOM('<html lang="en"><body><div id="content"></div></body></html>');
        // @ts-ignore
        global.window = dom.window;
        // global.navigator = dom.window.navigator
        var document = dom.window.document;
        var app = (react_1.default.createElement(SearchQueryContext_1.default.Provider, { value: { query: query } },
            react_1.default.createElement(HighLight_1.default, { text: text, markdown: markdown })));
        react_dom_1.default.render(app, document.getElementById('content'));
        return document;
    }
    it('puts <mark> around exact matches', function () {
        var document = renderHighlight('Some text with a keyword inside', 'keyword', false);
        var highlighted = Array.from(document.querySelectorAll('#content mark')).map(function (span) { return span.textContent; });
        assert_1.default.deepStrictEqual(highlighted, ['keyword']);
    });
    it('puts <mark> around stemmed query words', function () {
        var document = renderHighlight('This step has failed when a failure occurred (so it fails)', 'failed', false);
        var highlighted = Array.from(document.querySelectorAll('#content mark')).map(function (span) { return span.textContent; });
        // The first one is the exact match.
        // The second one corresponds to the "failure" word, which stem is "fail"
        // The third one corresponds to the "fails" word
        assert_1.default.deepStrictEqual(highlighted, ['failed', 'fail', 'fail']);
    });
    it('puts <mark> around multiple words and stems', function () {
        var document = renderHighlight('Given a passed step\nWhen a failed step\nThen a skipped step', 'step fail pass skipped', false);
        var highlighted = Array.from(document.querySelectorAll('#content mark')).map(function (span) { return span.textContent; });
        assert_1.default.deepStrictEqual(highlighted, [
            'pass',
            'step',
            'fail',
            'step',
            'skipped',
            'step',
        ]);
    });
    it('puts <mark> around matches in markdown', function () {
        var document = renderHighlight('* This is\n* a bullet list', 'bullet', true);
        var highlighted = Array.from(document.querySelectorAll('#content mark')).map(function (span) { return span.textContent; });
        assert_1.default.deepStrictEqual(highlighted, ['bullet']);
    });
    it('does not render <script> tags in markdown', function () {
        var document = renderHighlight('Failed XSS: <script>alert("hello")</script>', 'alert hello', true);
        var html = document.querySelector('#content').innerHTML;
        // Script tags will be removed (rather than escaped). Ideally we'd *escape* them to &lt;script&gt;.
        assert_1.default.deepStrictEqual(html, '<div class="highlight"><p>Failed XSS: <mark>alert</mark>("<mark>hello</mark>")</p></div>');
    });
    it('renders <section> tags in markdown', function () {
        var document = renderHighlight('We *like* other HTML tags:\n\n<section>hello</section>', null, true);
        var html = document.querySelector('#content').innerHTML;
        assert_1.default.deepStrictEqual(html, '<div class="highlight"><p>We <em>like</em> other HTML tags:</p><section>hello</section></div>');
    });
    it('does not render JavaScript event handlers on tags in markdown', function () {
        var document = renderHighlight("Failed XSS: <small onclick=\"alert('hello')\" class=\"supersmall\">hello</small>", null, true);
        var html = document.querySelector('#content').innerHTML;
        assert_1.default.deepStrictEqual(html, '<div class="highlight"><p>Failed XSS: <small class="supersmall">hello</small></p></div>');
    });
});
//# sourceMappingURL=HighlightTest.js.map