"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var gherkin_utils_1 = require("@cucumber/gherkin-utils");
var query_1 = require("@cucumber/query");
var messages_1 = require("@cucumber/messages");
var fake_cucumber_1 = require("@cucumber/fake-cucumber");
var runFeature_1 = __importDefault(require("./runFeature"));
var assert_1 = __importDefault(require("assert"));
var countScenariosByStatuses_1 = __importDefault(require("../src/countScenariosByStatuses"));
describe('countScenariosByStatuses', function () {
    var gherkinQuery;
    var cucumberQuery;
    var supportCode;
    beforeEach(function () {
        gherkinQuery = new gherkin_utils_1.Query();
        cucumberQuery = new query_1.Query();
        supportCode = new fake_cucumber_1.SupportCode();
        supportCode.defineStepDefinition(null, 'a passed step', function () { return null; });
        supportCode.defineStepDefinition(null, 'a failed step', function () {
            throw new Error('Something bad happened here ...');
        });
    });
    it('counts the number of sscenarios with a given status', function () { return __awaiter(void 0, void 0, void 0, function () {
        var feature, emitted, gherkinDocuments, statuses;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    feature = "\nFeature: statuses\n\n  Scenario: passed\n    Given a passed step\n\n  Scenario: another passed\n    Given a passed step\n\n  Scenario: failed\n    Given a failed step\n\n  Scenario: undefined\n    Given we have no clue how to handle this step\n    ";
                    return [4 /*yield*/, runFeature_1.default(feature, gherkinQuery, supportCode)];
                case 1:
                    emitted = _a.sent();
                    emitted.map(function (message) { return cucumberQuery.update(message); });
                    gherkinDocuments = emitted
                        .filter(function (message) { return message.gherkinDocument; })
                        .map(function (message) { return message.gherkinDocument; });
                    statuses = countScenariosByStatuses_1.default(gherkinDocuments, gherkinQuery, cucumberQuery);
                    assert_1.default.strictEqual(statuses.get(messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED), 2);
                    assert_1.default.strictEqual(statuses.get(messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED), 1);
                    assert_1.default.strictEqual(statuses.get(messages_1.messages.TestStepFinished.TestStepResult.Status.UNDEFINED), 1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('counts different statuses with example tables', function () { return __awaiter(void 0, void 0, void 0, function () {
        var feature, emitted, gherkinDocuments, statuses;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    feature = "\nFeature: statuses\n\n  Scenario: with an example table\n    Given a <status> step\n\n    Examples:\n    | status    |\n    | passed    |\n    | failed    |\n    | undefined |\n\n    ";
                    return [4 /*yield*/, runFeature_1.default(feature, gherkinQuery, supportCode)];
                case 1:
                    emitted = _a.sent();
                    emitted.map(function (message) { return cucumberQuery.update(message); });
                    gherkinDocuments = emitted
                        .filter(function (message) { return message.gherkinDocument; })
                        .map(function (message) { return message.gherkinDocument; });
                    statuses = countScenariosByStatuses_1.default(gherkinDocuments, gherkinQuery, cucumberQuery);
                    assert_1.default.strictEqual(statuses.get(messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED), 1);
                    assert_1.default.strictEqual(statuses.get(messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED), 1);
                    assert_1.default.strictEqual(statuses.get(messages_1.messages.TestStepFinished.TestStepResult.Status.UNDEFINED), 1);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=countScenariosByStatusesTest.js.map