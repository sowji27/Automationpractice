"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var src_1 = require("../src");
var assert_1 = __importDefault(require("assert"));
var NdjsonToMessageStream_1 = __importDefault(require("../src/NdjsonToMessageStream"));
var verifyStreamContract_1 = __importDefault(require("./verifyStreamContract"));
var toArray_1 = __importDefault(require("./toArray"));
describe('NdjsonStream', function () {
    var makeToMessageStream = function () {
        return new NdjsonToMessageStream_1.default(src_1.messages.Envelope.fromObject.bind(src_1.messages.Envelope));
    };
    var makeFromMessageStream = function () { return new src_1.MessageToNdjsonStream(); };
    verifyStreamContract_1.default(makeFromMessageStream, makeToMessageStream);
    it('converts a buffer stream written byte by byte', function (cb) {
        var stream = makeToMessageStream();
        var envelope = src_1.messages.Envelope.create({
            testStepFinished: src_1.messages.TestStepFinished.create({
                testStepResult: src_1.messages.TestStepFinished.TestStepResult.create({
                    status: src_1.messages.TestStepFinished.TestStepResult.Status.UNKNOWN,
                }),
            }),
        });
        var json = JSON.stringify(envelope.toJSON());
        stream.on('error', cb);
        stream.on('data', function (receivedEnvelope) {
            assert_1.default.deepStrictEqual(envelope, receivedEnvelope);
            cb();
        });
        var buffer = Buffer.from(json);
        for (var i = 0; i < buffer.length; i++) {
            stream.write(buffer.slice(i, i + 1));
        }
        stream.end();
    });
    it('converts messages to JSON with enums as strings', function (cb) {
        var stream = new src_1.MessageToNdjsonStream();
        stream.on('data', function (json) {
            var ob = JSON.parse(json);
            assert_1.default.deepStrictEqual(ob, {
                testStepFinished: {
                    testStepResult: {
                        status: 'UNKNOWN',
                    },
                },
            });
            cb();
        });
        stream.write(src_1.messages.Envelope.create({
            testStepFinished: src_1.messages.TestStepFinished.create({
                testStepResult: src_1.messages.TestStepFinished.TestStepResult.create({
                    status: src_1.messages.TestStepFinished.TestStepResult.Status.UNKNOWN,
                }),
            }),
        }));
    });
    it('converts messages to JSON with undefined arrays omitted', function (cb) {
        var stream = new src_1.MessageToNdjsonStream();
        stream.on('data', function (json) {
            var ob = JSON.parse(json);
            assert_1.default.deepStrictEqual(ob, { testCase: { pickleId: '123' } });
            cb();
        });
        stream.write(src_1.messages.Envelope.create({
            testCase: src_1.messages.TestCase.create({
                pickleId: '123',
            }),
        }));
    });
    it('converts messages to JSON with undefined strings omitted', function (cb) {
        var stream = new src_1.MessageToNdjsonStream();
        stream.on('data', function (json) {
            var ob = JSON.parse(json);
            assert_1.default.deepStrictEqual(ob, { testCase: {} });
            cb();
        });
        stream.write(src_1.messages.Envelope.create({
            testCase: src_1.messages.TestCase.create({ pickleId: '' }),
        }));
    });
    it('converts messages to JSON with undefined numbers omitted', function (cb) {
        var stream = new src_1.MessageToNdjsonStream();
        stream.on('data', function (json) {
            var ob = JSON.parse(json);
            assert_1.default.deepStrictEqual(ob, {
                gherkinDocument: {
                    feature: {
                        location: {
                            column: 1,
                        },
                    },
                },
            });
            cb();
        });
        stream.write(src_1.messages.Envelope.create({
            gherkinDocument: src_1.messages.GherkinDocument.create({
                feature: src_1.messages.GherkinDocument.Feature.create({
                    location: src_1.messages.Location.create({
                        column: 1,
                    }),
                }),
            }),
        }));
    });
    it('ignores missing fields', function () { return __awaiter(void 0, void 0, void 0, function () {
        var toMessageStream, incomingMessages;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    toMessageStream = makeToMessageStream();
                    toMessageStream.write('{"unused": 999}\n');
                    toMessageStream.end();
                    return [4 /*yield*/, toArray_1.default(toMessageStream)];
                case 1:
                    incomingMessages = _a.sent();
                    assert_1.default.deepStrictEqual(incomingMessages, [src_1.messages.Envelope.create({})]);
                    return [2 /*return*/];
            }
        });
    }); });
    it('ignores empty lines', function () { return __awaiter(void 0, void 0, void 0, function () {
        var toMessageStream, incomingMessages;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    toMessageStream = makeToMessageStream();
                    toMessageStream.write('{}\n{}\n\n{}\n');
                    toMessageStream.end();
                    return [4 /*yield*/, toArray_1.default(toMessageStream)];
                case 1:
                    incomingMessages = _a.sent();
                    assert_1.default.deepStrictEqual(incomingMessages, [
                        src_1.messages.Envelope.create({}),
                        src_1.messages.Envelope.create({}),
                        src_1.messages.Envelope.create({}),
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
    it('includes offending line in error message', function () { return __awaiter(void 0, void 0, void 0, function () {
        var toMessageStream;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    toMessageStream = makeToMessageStream();
                    return [4 /*yield*/, assert_1.default.rejects(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        toMessageStream.write('{}\nBLA BLA\n\n{}\n');
                                        toMessageStream.end();
                                        return [4 /*yield*/, toArray_1.default(toMessageStream)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, {
                            message: 'Not JSON: BLA BLA',
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=NdjsonStreamTest.js.map