"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getZeroDuration = exports.durationBetweenTimestamps = exports.durationToNanoseconds = exports.durationToMilliseconds = exports.millisecondsToDuration = exports.addDurations = exports.NANOSECONDS_IN_SECOND = exports.MILLISECONDS_IN_SECOND = exports.NANOSECONDS_IN_MILLISECOND = void 0;
const messages_1 = require("@cucumber/messages");
const value_checker_1 = require("./value_checker");
exports.NANOSECONDS_IN_MILLISECOND = 1e6;
exports.MILLISECONDS_IN_SECOND = 1e3;
exports.NANOSECONDS_IN_SECOND = 1e9;
let previousTimestamp;
const methods = {
    beginTiming() {
        previousTimestamp = getTimestamp();
    },
    clearInterval: clearInterval.bind(global),
    clearTimeout: clearTimeout.bind(global),
    Date,
    endTiming() {
        return getTimestamp() - previousTimestamp;
    },
    setInterval: setInterval.bind(global),
    setTimeout: setTimeout.bind(global),
};
if (typeof setImmediate !== 'undefined') {
    methods.setImmediate = setImmediate.bind(global);
    methods.clearImmediate = clearImmediate.bind(global);
}
function getTimestamp() {
    return new methods.Date().getTime();
}
function toNumber(x) {
    return typeof x === 'number' ? x : x.toNumber();
}
function addDurations(a, b) {
    if (value_checker_1.doesNotHaveValue(b)) {
        return a;
    }
    let seconds = toNumber(a.seconds) + toNumber(b.seconds);
    let nanos = a.nanos + b.nanos;
    if (nanos > exports.NANOSECONDS_IN_SECOND) {
        seconds += 1;
        nanos -= exports.NANOSECONDS_IN_SECOND;
    }
    return new messages_1.messages.Duration({ seconds, nanos });
}
exports.addDurations = addDurations;
// TODO use TimeConversion methods in cucumber-messages
//   dependent on https://github.com/cucumber/cucumber/pull/832
function millisecondsToDuration(milliseconds) {
    const seconds = Math.floor(milliseconds / exports.MILLISECONDS_IN_SECOND);
    const nanos = (milliseconds - seconds * exports.MILLISECONDS_IN_SECOND) *
        exports.NANOSECONDS_IN_MILLISECOND;
    return new messages_1.messages.Duration({ seconds, nanos });
}
exports.millisecondsToDuration = millisecondsToDuration;
function durationToMilliseconds(duration) {
    const secondMillis = toNumber(duration.seconds) * exports.MILLISECONDS_IN_SECOND;
    const nanoMillis = duration.nanos / exports.NANOSECONDS_IN_MILLISECOND;
    return secondMillis + nanoMillis;
}
exports.durationToMilliseconds = durationToMilliseconds;
function durationToNanoseconds(duration) {
    return toNumber(duration.seconds) * exports.NANOSECONDS_IN_SECOND + duration.nanos;
}
exports.durationToNanoseconds = durationToNanoseconds;
function durationBetweenTimestamps(startedTimestamp, finishedTimestamp) {
    const durationMillis = messages_1.TimeConversion.timestampToMillisecondsSinceEpoch(finishedTimestamp) -
        messages_1.TimeConversion.timestampToMillisecondsSinceEpoch(startedTimestamp);
    return messages_1.TimeConversion.millisecondsToDuration(durationMillis);
}
exports.durationBetweenTimestamps = durationBetweenTimestamps;
function getZeroDuration() {
    return new messages_1.messages.Duration({ seconds: 0, nanos: 0 });
}
exports.getZeroDuration = getZeroDuration;
exports.default = methods;
//# sourceMappingURL=time.js.map