"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_stream_1 = __importDefault(require("is-stream"));
const messages_1 = require("@cucumber/messages");
const value_checker_1 = require("../../value_checker");
class AttachmentManager {
    constructor(onAttachment) {
        this.onAttachment = onAttachment;
    }
    log(text) {
        return this.create(text, 'text/x.cucumber.log+plain');
    }
    create(data, mediaType, callback) {
        if (Buffer.isBuffer(data)) {
            if (value_checker_1.doesNotHaveValue(mediaType)) {
                throw Error('Buffer attachments must specify a media type');
            }
            this.createBufferAttachment(data, mediaType);
        }
        else if (is_stream_1.default.readable(data)) {
            if (value_checker_1.doesNotHaveValue(mediaType)) {
                throw Error('Stream attachments must specify a media type');
            }
            return this.createStreamAttachment(data, mediaType, callback);
        }
        else if (typeof data === 'string') {
            if (value_checker_1.doesNotHaveValue(mediaType)) {
                mediaType = 'text/plain';
            }
            this.createStringAttachment(data, {
                encoding: messages_1.messages.Attachment.ContentEncoding.IDENTITY,
                contentType: mediaType,
            });
        }
        else {
            throw Error('Invalid attachment data: must be a buffer, readable stream, or string');
        }
    }
    createBufferAttachment(data, mediaType) {
        this.createStringAttachment(data.toString('base64'), {
            encoding: messages_1.messages.Attachment.ContentEncoding.BASE64,
            contentType: mediaType,
        });
    }
    createStreamAttachment(data, mediaType, callback) {
        const promise = new Promise((resolve, reject) => {
            const buffers = [];
            data.on('data', (chunk) => {
                buffers.push(chunk);
            });
            data.on('end', () => {
                this.createBufferAttachment(Buffer.concat(buffers), mediaType);
                resolve();
            });
            data.on('error', reject);
        });
        if (value_checker_1.doesHaveValue(callback)) {
            promise.then(callback, callback);
        }
        else {
            return promise;
        }
    }
    createStringAttachment(data, media) {
        this.onAttachment({ data, media });
    }
}
exports.default = AttachmentManager;
//# sourceMappingURL=index.js.map