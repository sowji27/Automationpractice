"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PredictableTestRunStopwatch = exports.RealTestRunStopwatch = void 0;
const messages_1 = require("@cucumber/messages");
const durations_1 = require("durations");
class RealTestRunStopwatch {
    constructor() {
        this.stopwatch = durations_1.stopwatch();
        this.base = null;
    }
    from(duration) {
        this.base = duration;
        return this;
    }
    start() {
        this.stopwatch.start();
        return this;
    }
    stop() {
        this.stopwatch.stop();
        return this;
    }
    duration() {
        const current = this.stopwatch.duration();
        if (this.base !== null) {
            return durations_1.duration(this.base.nanos() + current.nanos());
        }
        return current;
    }
    timestamp() {
        return messages_1.TimeConversion.millisecondsSinceEpochToTimestamp(Date.now());
    }
}
exports.RealTestRunStopwatch = RealTestRunStopwatch;
class PredictableTestRunStopwatch {
    constructor() {
        this.count = 0;
        this.base = null;
    }
    from(duration) {
        this.base = duration;
        return this;
    }
    start() {
        return this;
    }
    stop() {
        return this;
    }
    duration() {
        const current = durations_1.duration(this.count * 1000000);
        if (this.base !== null) {
            return durations_1.duration(this.base.nanos() + current.nanos());
        }
        return current;
    }
    timestamp() {
        const fakeTimestamp = this.convertToTimestamp(this.duration());
        this.count++;
        return fakeTimestamp;
    }
    // TODO: Remove. It's impossible to convert timestamps to durations and vice-versa
    convertToTimestamp(duration) {
        const seconds = Math.floor(duration.seconds());
        const nanos = Math.floor((duration.seconds() - seconds) * 1000000000);
        return {
            seconds,
            nanos,
        };
    }
}
exports.PredictableTestRunStopwatch = PredictableTestRunStopwatch;
//# sourceMappingURL=stopwatch.js.map