/// <reference types="node" />
import { Dictionary } from 'lodash';
import { messages } from '@cucumber/messages';
import { EventEmitter } from 'events';
import { Query } from '@cucumber/query';
export interface ITestCaseAttempt {
    attempt: number;
    gherkinDocument: messages.IGherkinDocument;
    pickle: messages.IPickle;
    stepAttachments: Dictionary<messages.IAttachment[]>;
    stepResults: Dictionary<messages.TestStepFinished.ITestStepResult>;
    testCase: messages.ITestCase;
    worstTestStepResult: messages.TestStepFinished.ITestStepResult;
}
export default class EventDataCollector {
    private gherkinDocumentMap;
    private pickleMap;
    private testCaseMap;
    private testCaseAttemptDataMap;
    readonly undefinedParameterTypes: messages.IUndefinedParameterType[];
    readonly query: Query;
    constructor(eventBroadcaster: EventEmitter);
    getGherkinDocument(uri: string): messages.IGherkinDocument;
    getPickle(pickleId: string): messages.IPickle;
    getTestCaseAttempts(): ITestCaseAttempt[];
    getTestCaseAttempt(testCaseStartedId: string): ITestCaseAttempt;
    parseEnvelope(envelope: messages.Envelope): void;
    initTestCaseAttempt(testCaseStarted: messages.ITestCaseStarted): void;
    storeAttachment({ testCaseStartedId, testStepId, body, mediaType, }: messages.IAttachment): void;
    storeTestStepResult({ testCaseStartedId, testStepId, testStepResult, }: messages.ITestStepFinished): void;
    storeTestCaseResult({ testCaseStartedId }: messages.ITestCaseFinished): void;
}
