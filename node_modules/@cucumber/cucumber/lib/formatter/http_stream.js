"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const tmp_1 = __importDefault(require("tmp"));
const fs_1 = __importDefault(require("fs"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const value_checker_1 = require("../value_checker");
/**
 * This Writable writes data to a HTTP/HTTPS URL.
 *
 * It has special handling for https://reports.cucumber.io/
 * which uses an API where the first request is a `GET`,
 * and if the response is 202 with a Location header, issues
 * a PUT request to that URL.
 *
 * 3xx redirects are not currently followed.
 */
class HttpStream extends stream_1.Writable {
    constructor(url, method, headers, reportLocation) {
        super();
        this.url = url;
        this.method = method;
        this.headers = headers;
        this.reportLocation = reportLocation;
        this.responseBodyFromGet = null;
    }
    _write(chunk, encoding, callback) {
        if (this.tempFile === undefined) {
            tmp_1.default.file((err, name, fd) => {
                if (value_checker_1.doesHaveValue(err))
                    return callback(err);
                this.tempFilePath = name;
                this.tempFile = fs_1.default.createWriteStream(name, { fd });
                this.tempFile.write(chunk, encoding, callback);
            });
        }
        else {
            this.tempFile.write(chunk, encoding, callback);
        }
    }
    _final(callback) {
        this.tempFile.end(() => {
            this.sendRequest(this.url, this.method, (err) => {
                if (value_checker_1.doesHaveValue(err))
                    return callback(err);
                this.reportLocation(this.responseBodyFromGet);
                callback(null);
            });
        });
    }
    sendRequest(url, method, callback) {
        const httpx = value_checker_1.doesHaveValue(url.match(/^https:/)) ? https_1.default : http_1.default;
        if (method === 'GET') {
            httpx.get(url, { headers: this.headers }, (res) => {
                if (res.statusCode >= 400) {
                    return callback(new Error(`${method} ${url} returned status ${res.statusCode}`));
                }
                if (res.statusCode !== 202 || res.headers.location === undefined) {
                    callback(null, url);
                }
                else {
                    let body = Buffer.alloc(0);
                    res.on('data', (chunk) => {
                        body = Buffer.concat([body, chunk]);
                    });
                    res.on('end', () => {
                        this.responseBodyFromGet = body.toString('utf-8');
                        this.sendRequest(res.headers.location, 'PUT', callback);
                    });
                }
            });
        }
        else {
            const contentLength = fs_1.default.statSync(this.tempFilePath).size;
            const req = httpx.request(url, {
                method,
                headers: {
                    'Content-Length': contentLength,
                },
            });
            req.on('response', (res) => {
                if (res.statusCode >= 400) {
                    let body = Buffer.alloc(0);
                    res.on('data', (chunk) => {
                        body = Buffer.concat([body, chunk]);
                    });
                    res.on('end', () => {
                        callback(new Error(`${method} ${url} returned status ${res.statusCode}:\n${body.toString('utf-8')}`));
                    });
                    res.on('error', callback);
                }
                else {
                    callback(null, url);
                }
            });
            stream_1.pipeline(fs_1.default.createReadStream(this.tempFilePath), req, (err) => {
                if (value_checker_1.doesHaveValue(err))
                    callback(err);
            });
        }
    }
}
exports.default = HttpStream;
//# sourceMappingURL=http_stream.js.map