import { Dictionary } from 'lodash';
import Formatter, { IFormatterOptions } from './';
import { messages } from '@cucumber/messages';
import IFeature = messages.GherkinDocument.IFeature;
import IPickle = messages.IPickle;
import IScenario = messages.GherkinDocument.Feature.IScenario;
import IRule = messages.GherkinDocument.Feature.FeatureChild.IRule;
export interface IJsonFeature {
    description: string;
    elements: IJsonScenario[];
    id: string;
    keyword: string;
    line: number;
    name: string;
    tags: IJsonTag[];
    uri: string;
}
export interface IJsonScenario {
    description: string;
    id: string;
    keyword: string;
    line: number;
    name: string;
    steps: IJsonStep[];
    tags: IJsonTag[];
    type: string;
}
export interface IJsonStep {
    arguments?: any;
    embeddings?: any;
    hidden?: boolean;
    keyword?: string;
    line?: number;
    match?: any;
    name?: string;
    result?: any;
}
export interface IJsonTag {
    name: string;
    line: number;
}
interface IBuildJsonFeatureOptions {
    feature: messages.GherkinDocument.IFeature;
    elements: IJsonScenario[];
    uri: string;
}
interface IBuildJsonScenarioOptions {
    feature: messages.GherkinDocument.IFeature;
    gherkinScenarioMap: Dictionary<IScenario>;
    gherkinExampleRuleMap: Dictionary<IRule>;
    gherkinScenarioLocationMap: Dictionary<messages.ILocation>;
    pickle: messages.IPickle;
    steps: IJsonStep[];
}
interface IBuildJsonStepOptions {
    isBeforeHook: boolean;
    gherkinStepMap: Dictionary<messages.GherkinDocument.Feature.IStep>;
    pickleStepMap: Dictionary<messages.Pickle.IPickleStep>;
    testStep: messages.TestCase.ITestStep;
    testStepAttachments: messages.IAttachment[];
    testStepResult: messages.TestStepFinished.ITestStepResult;
}
export default class JsonFormatter extends Formatter {
    constructor(options: IFormatterOptions);
    convertNameToId(obj: IFeature | IPickle): string;
    formatDataTable(dataTable: messages.PickleStepArgument.IPickleTable): any;
    formatDocString(docString: messages.PickleStepArgument.IPickleDocString, gherkinStep: messages.GherkinDocument.Feature.IStep): any;
    formatStepArgument(stepArgument: messages.IPickleStepArgument, gherkinStep: messages.GherkinDocument.Feature.IStep): any;
    onTestRunFinished(): void;
    getFeatureData({ feature, elements, uri, }: IBuildJsonFeatureOptions): IJsonFeature;
    getScenarioData({ feature, gherkinScenarioLocationMap, gherkinExampleRuleMap, gherkinScenarioMap, pickle, steps, }: IBuildJsonScenarioOptions): IJsonScenario;
    private formatScenarioId;
    getStepData({ isBeforeHook, gherkinStepMap, pickleStepMap, testStep, testStepAttachments, testStepResult, }: IBuildJsonStepOptions): IJsonStep;
    getFeatureTags(feature: IFeature): IJsonTag[];
    getScenarioTags({ feature, pickle, gherkinScenarioMap, }: {
        feature: IFeature;
        pickle: IPickle;
        gherkinScenarioMap: {
            [id: string]: IScenario;
        };
    }): IJsonTag[];
}
export {};
