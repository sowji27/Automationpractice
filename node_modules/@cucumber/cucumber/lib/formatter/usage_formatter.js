"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const helpers_1 = require("./helpers");
const _1 = __importDefault(require("./"));
const cli_table3_1 = __importDefault(require("cli-table3"));
const time_1 = require("../time");
const value_checker_1 = require("../value_checker");
class UsageFormatter extends _1.default {
    constructor(options) {
        super(options);
        options.eventBroadcaster.on('envelope', (envelope) => {
            if (value_checker_1.doesHaveValue(envelope.testRunFinished)) {
                this.logUsage();
            }
        });
    }
    logUsage() {
        const usage = helpers_1.getUsage({
            cwd: this.cwd,
            stepDefinitions: this.supportCodeLibrary.stepDefinitions,
            eventDataCollector: this.eventDataCollector,
        });
        if (usage.length === 0) {
            this.log('No step definitions');
            return;
        }
        const table = new cli_table3_1.default({
            head: ['Pattern / Text', 'Duration', 'Location'],
            style: {
                border: [],
                head: [],
            },
        });
        usage.forEach(({ line, matches, meanDuration, pattern, patternType, uri }) => {
            let formattedPattern = pattern;
            if (patternType === 'RegularExpression') {
                formattedPattern = '/' + formattedPattern + '/';
            }
            const col1 = [formattedPattern];
            const col2 = [];
            if (matches.length > 0) {
                if (value_checker_1.doesHaveValue(meanDuration)) {
                    col2.push(`${time_1.durationToMilliseconds(meanDuration).toFixed(2)}ms`);
                }
                else {
                    col2.push('-');
                }
            }
            else {
                col2.push('UNUSED');
            }
            const col3 = [helpers_1.formatLocation({ line, uri })];
            lodash_1.default.take(matches, 5).forEach((match) => {
                col1.push(`  ${match.text}`);
                if (value_checker_1.doesHaveValue(match.duration)) {
                    col2.push(`${time_1.durationToMilliseconds(match.duration).toString()}ms`);
                }
                else {
                    col2.push('-');
                }
                col3.push(helpers_1.formatLocation(match));
            });
            if (matches.length > 5) {
                col1.push(`  ${(matches.length - 5).toString()} more`);
            }
            table.push([col1.join('\n'), col2.join('\n'), col3.join('\n')]);
        });
        this.log(`${table.toString()}\n`);
    }
}
exports.default = UsageFormatter;
//# sourceMappingURL=usage_formatter.js.map