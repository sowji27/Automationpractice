"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const _1 = __importDefault(require("./"));
const status_1 = __importDefault(require("../status"));
const path_1 = __importDefault(require("path"));
const gherkin_document_parser_1 = require("./helpers/gherkin_document_parser");
const value_checker_1 = require("../value_checker");
const DEFAULT_SEPARATOR = '\n';
class RerunFormatter extends _1.default {
    constructor(options) {
        super(options);
        options.eventBroadcaster.on('envelope', (envelope) => {
            if (value_checker_1.doesHaveValue(envelope.testRunFinished)) {
                this.logFailedTestCases();
            }
        });
        const rerunOptions = value_checker_1.valueOrDefault(options.parsedArgvOptions.rerun, {});
        this.separator = value_checker_1.valueOrDefault(rerunOptions.separator, DEFAULT_SEPARATOR);
    }
    logFailedTestCases() {
        const mapping = {};
        lodash_1.default.each(this.eventDataCollector.getTestCaseAttempts(), ({ gherkinDocument, pickle, worstTestStepResult }) => {
            if (worstTestStepResult.status !== status_1.default.PASSED) {
                const relativeUri = path_1.default.relative(this.cwd, pickle.uri);
                const line = gherkin_document_parser_1.getGherkinScenarioLocationMap(gherkinDocument)[lodash_1.default.last(pickle.astNodeIds)].line;
                if (value_checker_1.doesNotHaveValue(mapping[relativeUri])) {
                    mapping[relativeUri] = [];
                }
                mapping[relativeUri].push(line);
            }
        });
        const text = lodash_1.default.chain(mapping)
            .map((lines, uri) => `${uri}:${lines.join(':')}`)
            .join(this.separator)
            .value();
        this.log(text);
    }
}
exports.default = RerunFormatter;
//# sourceMappingURL=rerun_formatter.js.map