"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var gherkin_1 = require("@cucumber/gherkin");
var messages_1 = require("@cucumber/messages");
var stream_1 = require("stream");
var assert_1 = __importDefault(require("assert"));
var Query_1 = __importDefault(require("../src/Query"));
var util_1 = require("util");
var pipelinePromise = util_1.promisify(stream_1.pipeline);
describe('Query', function () {
    var gherkinQuery;
    var envelopes;
    beforeEach(function () {
        envelopes = [];
        gherkinQuery = new Query_1.default();
    });
    describe('#getLocation(astNodeId)', function () {
        it('looks up a scenario line number', function () { return __awaiter(void 0, void 0, void 0, function () {
            var pickle, gherkinScenarioId, location;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, parse("Feature: hello\n  Scenario: hi\n    Given a passed step\n")];
                    case 1:
                        _a.sent();
                        pickle = envelopes.find(function (e) { return e.pickle; }).pickle;
                        gherkinScenarioId = pickle.astNodeIds[0];
                        location = gherkinQuery.getLocation(gherkinScenarioId);
                        assert_1.default.deepStrictEqual(location.line, 2);
                        return [2 /*return*/];
                }
            });
        }); });
        it('looks up a step line number', function () { return __awaiter(void 0, void 0, void 0, function () {
            var pickleStep, gherkinStepId, location;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, parse("Feature: hello\n  Scenario: hi\n    Given a passed step\n")];
                    case 1:
                        _a.sent();
                        pickleStep = envelopes.find(function (e) { return e.pickle; }).pickle.steps[0];
                        gherkinStepId = pickleStep.astNodeIds[0];
                        location = gherkinQuery.getLocation(gherkinStepId);
                        assert_1.default.deepStrictEqual(location.line, 3);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('#getPickleIds(uri, astNodeId)', function () {
        it('looks up pickle IDs for a scenario', function () { return __awaiter(void 0, void 0, void 0, function () {
            var gherkinDocument, scenario, pickleId, pickleIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, parse("Feature: hello\n  Background:\n    Given a background step\n\n  Scenario: hi\n    Given a passed step\n")];
                    case 1:
                        _a.sent();
                        gherkinDocument = envelopes.find(function (envelope) { return envelope.gherkinDocument; }).gherkinDocument;
                        scenario = gherkinDocument.feature.children.find(function (child) { return child.scenario; }).scenario;
                        pickleId = envelopes.find(function (e) { return e.pickle; }).pickle.id;
                        pickleIds = gherkinQuery.getPickleIds('test.feature', scenario.id);
                        assert_1.default.deepStrictEqual(pickleIds, [pickleId]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('looks up pickle IDs for a whole document', function () { return __awaiter(void 0, void 0, void 0, function () {
            var expectedPickleIds, pickleIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, parse("Feature: hello\n  Scenario:\n    Given a failed step\n\n  Scenario: hi\n    Given a passed step\n")];
                    case 1:
                        _a.sent();
                        expectedPickleIds = envelopes
                            .filter(function (e) { return e.pickle; })
                            .map(function (e) { return e.pickle.id; });
                        pickleIds = gherkinQuery.getPickleIds('test.feature');
                        assert_1.default.deepStrictEqual(pickleIds, expectedPickleIds);
                        return [2 /*return*/];
                }
            });
        }); });
        it.skip('fails to look up pickle IDs for a step', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, parse("Feature: hello\n  Background:\n    Given a background step\n\n  Scenario: hi\n    Given a passed step\n")];
                    case 1:
                        _a.sent();
                        assert_1.default.throws(function () { return gherkinQuery.getPickleIds('test.feature', 'some-non-existing-id'); }, {
                            message: 'No values found for key 6. Keys: [some-non-existing-id]',
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('avoids dupes and ignores empty scenarios', function () { return __awaiter(void 0, void 0, void 0, function () {
            var pickleIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, parse("Feature: Examples and empty scenario\n\n  Scenario: minimalistic\n    Given the <what>\n\n    Examples:\n      | what |\n      | foo  |\n\n    Examples:\n      | what |\n      | bar  |\n\n  Scenario: ha ok\n")];
                    case 1:
                        _a.sent();
                        pickleIds = gherkinQuery.getPickleIds('test.feature');
                        // One for each table, and one for the empty scenario
                        // https://github.com/cucumber/cucumber/issues/249
                        assert_1.default.strictEqual(pickleIds.length, 3, pickleIds.join(','));
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('#getPickleStepIds(astNodeId', function () {
        it('returns an empty list when the ID is unknown', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, parse('Feature: An empty feature')];
                    case 1:
                        _a.sent();
                        assert_1.default.deepEqual(gherkinQuery.getPickleStepIds('whetever-id'), []);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns the pickle step IDs corresponding the a scenario step', function () { return __awaiter(void 0, void 0, void 0, function () {
            var pickleStepIds, stepId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, parse("Feature: hello\n  Scenario:\n    Given a failed step\n")];
                    case 1:
                        _a.sent();
                        pickleStepIds = envelopes
                            .find(function (envelope) { return envelope.pickle; })
                            .pickle.steps.map(function (pickleStep) { return pickleStep.id; });
                        stepId = envelopes.find(function (envelope) { return envelope.gherkinDocument; })
                            .gherkinDocument.feature.children[0].scenario.steps[0].id;
                        assert_1.default.deepEqual(gherkinQuery.getPickleStepIds(stepId), pickleStepIds);
                        return [2 /*return*/];
                }
            });
        }); });
        context('when a step has multiple pickle step', function () {
            it('returns all pickleStepIds linked to a background step', function () { return __awaiter(void 0, void 0, void 0, function () {
                var backgroundStepId, pickleStepIds;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, parse("Feature: hello\n  Background:\n    Given a step that will have 2 pickle steps\n\n  Scenario:\n    Given a step that will only have 1 pickle step\n\n    Scenario:\n    Given a step that will only have 1 pickle step\n  ")];
                        case 1:
                            _a.sent();
                            backgroundStepId = envelopes.find(function (envelope) { return envelope.gherkinDocument; }).gherkinDocument.feature.children[0].background.steps[0].id;
                            pickleStepIds = envelopes
                                .filter(function (envelope) { return envelope.pickle; })
                                .map(function (envelope) { return envelope.pickle.steps[0].id; });
                            assert_1.default.deepEqual(gherkinQuery.getPickleStepIds(backgroundStepId), pickleStepIds);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('return all pickleStepIds linked to a step in a scenario with examples', function () { return __awaiter(void 0, void 0, void 0, function () {
                var scenarioStepId, pickleStepIds;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, parse("Feature: hello\n  Scenario:\n    Given a passed step\n    And a <status> step\n\n    Examples:\n      | status |\n      | passed |\n      | failed |\n")];
                        case 1:
                            _a.sent();
                            scenarioStepId = envelopes.find(function (envelope) { return envelope.gherkinDocument; }).gherkinDocument.feature.children[0].scenario.steps[1].id;
                            pickleStepIds = envelopes
                                .filter(function (envelope) { return envelope.pickle; })
                                .map(function (envelope) { return envelope.pickle.steps[1].id; });
                            assert_1.default.deepEqual(gherkinQuery.getPickleStepIds(scenarioStepId), pickleStepIds);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    function parse(gherkinSource) {
        var writable = new stream_1.Writable({
            objectMode: true,
            write: function (envelope, encoding, callback) {
                envelopes.push(envelope);
                try {
                    gherkinQuery.update(envelope);
                    callback();
                }
                catch (err) {
                    callback(err);
                }
            },
        });
        return pipelinePromise(gherkinMessages(gherkinSource, 'test.feature'), writable);
    }
    function gherkinMessages(gherkinSource, uri) {
        var source = messages_1.messages.Envelope.fromObject({
            source: {
                uri: uri,
                data: gherkinSource,
                mediaType: 'text/x.cucumber.gherkin+plain',
            },
        });
        var newId = messages_1.IdGenerator.incrementing();
        return gherkin_1.GherkinStreams.fromSources([source], { newId: newId });
    }
});
//# sourceMappingURL=QueryTest.js.map