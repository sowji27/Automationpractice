"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var GherkinDocumentWalker_1 = __importStar(require("../src/GherkinDocumentWalker"));
var pretty_1 = __importDefault(require("../src/pretty"));
var parse_1 = __importDefault(require("./parse"));
describe('GherkinDocumentWalker', function () {
    var walker;
    beforeEach(function () {
        walker = new GherkinDocumentWalker_1.default();
    });
    function assertCopy(copy, source) {
        assert_1.default.deepEqual(copy, source);
        assert_1.default.notEqual(copy, source);
    }
    it('returns a deep copy', function () {
        var gherkinDocument = parse_1.default("@featureTag\nFeature: hello\n  This feature has a description\n\n  Background: Base Background\n    This is a described background\n    Given a passed step\n\n  @scenarioTag\n  Scenario: salut\n    Yes, there is a description here too\n\n  Rule: roule\n    Can we describe a Rule ?\n\n    Background: poupidou\n    Scenario: pouet\n");
        var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
        assertCopy(newGherkinDocument, gherkinDocument);
        assertCopy(newGherkinDocument.feature, gherkinDocument.feature);
        assertCopy(newGherkinDocument.feature.children[0].background, gherkinDocument.feature.children[0].background);
        assertCopy(newGherkinDocument.feature.children[1].scenario, gherkinDocument.feature.children[1].scenario);
        assertCopy(newGherkinDocument.feature.children[2].rule, gherkinDocument.feature.children[2].rule);
        assertCopy(newGherkinDocument.feature.children[2].rule.children[1], gherkinDocument.feature.children[2].rule.children[1]);
        assertCopy(newGherkinDocument.feature.children[0].background.steps, gherkinDocument.feature.children[0].background.steps);
    });
    context('filtering objects', function () {
        it('filters one scenario', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptScenario: function (scenario) { return scenario.name === 'Earth'; } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Scenario: Earth\n    Given is a planet with liquid water\n";
            assert_1.default.strictEqual(newSource, expectedNewSource);
        });
        it('keeps scenario with search hit in step', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptStep: function (step) { return step.text.includes('liquid'); } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Scenario: Earth\n    Given is a planet with liquid water\n";
            assert_1.default.strictEqual(newSource, expectedNewSource);
        });
        it('does not leave null object as a feature child', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptScenario: function (scenario) { return scenario.name === 'Earth'; } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            assert_1.default.deepStrictEqual(newGherkinDocument.feature.children.filter(function (child) { return child === null; }), []);
        });
        it('keeps a hit scenario even when no steps match', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptScenario: function (scenario) { return scenario.name === 'Saturn'; } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n";
            assert_1.default.strictEqual(newSource, expectedNewSource);
        });
        it('keeps a hit background', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Background: Space\n    Given space is real\n\n  Rule: Galaxy\n    Background: Milky Way\n      Given it contains our system\n\n  Rule: Black Hole\n    Background: TON 618\n      Given it exists\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), {
                acceptBackground: function (background) { return background.name === 'Milky Way'; },
            }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Background: Space\n    Given space is real\n\n  Rule: Galaxy\n\n    Background: Milky Way\n      Given it contains our system\n";
            assert_1.default.strictEqual(newSource, expectedNewSource);
        });
        it('keeps a hit in background step', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Background: Space\n    Given space is real\n\n  Rule: Galaxy\n    Background: Milky Way\n      Given it contains our system\n\n  Rule: Black Hole\n    Background: TON 618\n      Given it exists\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptStep: function (step) { return step.text.includes('space'); } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Background: Space\n    Given space is real\n\n  Rule: Galaxy\n\n    Background: Milky Way\n      Given it contains our system\n\n  Rule: Black Hole\n\n    Background: TON 618\n      Given it exists\n";
            assert_1.default.strictEqual(newSource, expectedNewSource);
        });
        it('keeps scenario in rule', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Rule: Galaxy\n\n    Background: TON 618\n      Given it's a black hole\n\n    Scenario: Milky Way\n      Given it contains our system\n\n    Scenario: Andromeda\n      Given it exists\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptScenario: function (scenario) { return scenario.name === 'Andromeda'; } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Rule: Galaxy\n\n    Background: TON 618\n      Given it's a black hole\n\n    Scenario: Andromeda\n      Given it exists\n";
            assert_1.default.strictEqual(newSource, expectedNewSource);
        });
        it('keeps scenario and background in rule', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Rule: Galaxy\n\n    Background: TON 618\n      Given it's a black hole\n\n    Scenario: Milky Way\n      Given it contains our system\n\n    Scenario: Andromeda\n      Given it exists\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptRule: function (rule) { return rule.name === 'Galaxy'; } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Rule: Galaxy\n\n    Background: TON 618\n      Given it's a black hole\n\n    Scenario: Milky Way\n      Given it contains our system\n\n    Scenario: Andromeda\n      Given it exists\n";
            assert_1.default.strictEqual(newSource, expectedNewSource);
        });
        it('only keeps rule and its content', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Scenario: Milky Way\n    Given it contains our system\n\n  Rule: Galaxy\n\n    Scenario: Andromeda\n      Given it exists\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptRule: function () { return true; } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Rule: Galaxy\n\n    Scenario: Andromeda\n      Given it exists\n";
            assert_1.default.strictEqual(newSource, expectedNewSource);
        });
        it('return a feature and keep scenario', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n");
            var walker = new GherkinDocumentWalker_1.default(__assign(__assign({}, GherkinDocumentWalker_1.rejectAllFilters), { acceptFeature: function (feature) { return feature.name === 'Solar System'; } }));
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            var newSource = pretty_1.default(newGherkinDocument);
            var expectedNewSource = "Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n";
            assert_1.default.deepStrictEqual(newSource, expectedNewSource);
        });
        it('returns null when no hit found', function () {
            var gherkinDocument = parse_1.default("Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n");
            var walker = new GherkinDocumentWalker_1.default(GherkinDocumentWalker_1.rejectAllFilters);
            var newGherkinDocument = walker.walkGherkinDocument(gherkinDocument);
            assert_1.default.deepEqual(newGherkinDocument, null);
        });
    });
    context('handling objects', function () {
        describe('handleStep', function () {
            it('is called for each steps', function () {
                var source = parse_1.default("Feature: Solar System\n\n        Scenario: Earth\n          Given it is a planet\n");
                var stepText = [];
                var astWalker = new GherkinDocumentWalker_1.default({}, {
                    handleStep: function (step) { return stepText.push(step.text); },
                });
                astWalker.walkGherkinDocument(source);
                assert_1.default.deepEqual(stepText, ['it is a planet']);
            });
        });
        describe('handleScenario', function () {
            it('is called for each scenarios', function () {
                var source = parse_1.default("Feature: Solar System\n\n        Scenario: Earth\n          Given it is a planet\n\n        Scenario: Saturn\n          Given it's not a liquid planet\n");
                var scenarioName = [];
                var astWalker = new GherkinDocumentWalker_1.default({}, {
                    handleScenario: function (scenario) { return scenarioName.push(scenario.name); },
                });
                astWalker.walkGherkinDocument(source);
                assert_1.default.deepEqual(scenarioName, ['Earth', 'Saturn']);
            });
        });
        describe('handleBackground', function () {
            it('is called for each backgrounds', function () {
                var source = parse_1.default("Feature: Solar System\n\n        Background: Milky Way\n          Scenario: Earth\n            Given it is our galaxy\n");
                var backgroundName = [];
                var astWalker = new GherkinDocumentWalker_1.default({}, {
                    handleBackground: function (background) {
                        return backgroundName.push(background.name);
                    },
                });
                astWalker.walkGherkinDocument(source);
                assert_1.default.deepEqual(backgroundName, ['Milky Way']);
            });
        });
        describe('handleRule', function () {
            it('is called for each rules', function () {
                var source = parse_1.default("Feature: Solar System\n\n        Rule: On a planet\n          Scenario: There is life\n            Given there is water\n\n        Rule: On an exoplanet\n          Scenario: There is extraterrestrial life\n            Given there is a non-humanoid form of life\n");
                var ruleName = [];
                var astWalker = new GherkinDocumentWalker_1.default({}, {
                    handleRule: function (rule) { return ruleName.push(rule.name); },
                });
                astWalker.walkGherkinDocument(source);
                assert_1.default.deepEqual(ruleName, ['On a planet', 'On an exoplanet']);
            });
        });
        describe('handleFeature', function () {
            it('is called for each features', function () {
                var source = parse_1.default("Feature: Solar System\n\n        Rule: On a planet\n          Scenario: There is life\n            Given there is water\n\n        Rule: On an exoplanet\n          Scenario: There is extraterrestrial life\n            Given there is a non-humanoid form of life\n");
                var featureName = [];
                var astWalker = new GherkinDocumentWalker_1.default({}, {
                    handleFeature: function (feature) { return featureName.push(feature.name); },
                });
                astWalker.walkGherkinDocument(source);
                assert_1.default.deepEqual(featureName, ['Solar System']);
            });
        });
    });
    describe('regression tests', function () {
        it('does not fail with empty/commented documents', function () {
            var source = parse_1.default('# Feature: Solar System');
            var astWalker = new GherkinDocumentWalker_1.default();
            astWalker.walkGherkinDocument(source);
        });
    });
});
//# sourceMappingURL=GherkinDocumentWalkerTest.js.map