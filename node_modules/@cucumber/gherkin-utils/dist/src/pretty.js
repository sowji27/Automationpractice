"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
function pretty(gherkinDocument) {
    var e_1, _a, e_2, _b;
    var feature = gherkinDocument.feature;
    var s = prettyTags(feature.tags);
    s += feature.keyword + ': ' + feature.name + '\n';
    if (feature.description) {
        s += feature.description + '\n';
    }
    try {
        for (var _c = __values(feature.children), _d = _c.next(); !_d.done; _d = _c.next()) {
            var child = _d.value;
            if (child.background) {
                s += prettyStepContainer(child.background, '  ');
            }
            else if (child.scenario) {
                s += prettyStepContainer(child.scenario, '  ');
            }
            else if (child.rule) {
                s += "\n  " + child.rule.keyword + ": " + child.rule.name + "\n";
                if (child.rule.description) {
                    s += child.rule.description + '\n';
                }
                try {
                    for (var _e = (e_2 = void 0, __values(child.rule.children)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var ruleChild = _f.value;
                        if (ruleChild.background) {
                            s += prettyStepContainer(ruleChild.background, '    ');
                        }
                        if (ruleChild.scenario) {
                            s += prettyStepContainer(ruleChild.scenario, '    ');
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return s;
}
exports.default = pretty;
function prettyStepContainer(stepContainer, indent) {
    var e_3, _a, e_4, _b;
    var s = "\n" + prettyTags(stepContainer.tags, indent) + indent + stepContainer.keyword + ": " + stepContainer.name + "\n";
    if (stepContainer.description) {
        s += stepContainer.description + '\n\n';
    }
    try {
        for (var _c = __values(stepContainer.steps), _d = _c.next(); !_d.done; _d = _c.next()) {
            var step = _d.value;
            s += indent + "  " + step.keyword + step.text + "\n";
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_3) throw e_3.error; }
    }
    if (stepContainer.examples) {
        try {
            for (var _e = __values(stepContainer.examples), _f = _e.next(); !_f.done; _f = _e.next()) {
                var example = _f.value;
                s += prettyExample(example, indent + "  ");
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_4) throw e_4.error; }
        }
    }
    return s;
}
function prettyExample(example, indent) {
    var e_5, _a;
    var s = "\n" + indent + "Examples: " + example.name + "\n";
    s += prettyTableRow(example.tableHeader, indent + "  ");
    try {
        for (var _b = __values(example.tableBody), _c = _b.next(); !_c.done; _c = _b.next()) {
            var row = _c.value;
            s += prettyTableRow(row, indent + "  ");
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return s;
}
function prettyTableRow(row, indent) {
    return indent + "| " + row.cells.map(function (cell) { return cell.value; }).join(' | ') + " |\n";
}
function prettyTags(tags, indent) {
    if (indent === void 0) { indent = ''; }
    if (tags === undefined || tags.length == 0) {
        return '';
    }
    return indent + tags.map(function (tag) { return tag.name; }).join(' ') + '\n';
}
//# sourceMappingURL=pretty.js.map