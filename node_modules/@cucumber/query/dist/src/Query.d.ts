import { messages } from '@cucumber/messages';
export default class Query {
    private readonly testStepResultByPickleId;
    private readonly testStepResultsByPickleStepId;
    private readonly testStepById;
    private readonly testCaseByPickleId;
    private readonly pickleIdByTestStepId;
    private readonly pickleStepIdByTestStepId;
    private readonly testStepResultsbyTestStepId;
    private readonly testStepIdsByPickleStepId;
    private readonly hooksById;
    private readonly attachmentsByTestStepId;
    private readonly stepMatchArgumentsListsByPickleStepId;
    update(envelope: messages.IEnvelope): void;
    /**
     * Gets all the results for multiple pickle steps
     * @param pickleStepIds
     */
    getPickleStepTestStepResults(pickleStepIds: ReadonlyArray<string>): ReadonlyArray<messages.TestStepFinished.ITestStepResult>;
    /**
     * Gets all the results for multiple pickles
     * @param pickleIds
     */
    getPickleTestStepResults(pickleIds: ReadonlyArray<string>): ReadonlyArray<messages.TestStepFinished.ITestStepResult>;
    /**
     * Gets the worst result
     * @param testStepResults
     */
    getWorstTestStepResult(testStepResults: ReadonlyArray<messages.TestStepFinished.ITestStepResult>): messages.TestStepFinished.ITestStepResult;
    /**
     * Gets all the attachments for multiple pickle steps
     * @param pickleStepIds
     */
    getPickleStepAttachments(pickleStepIds: ReadonlyArray<string>): ReadonlyArray<messages.IAttachment>;
    getTestStepsAttachments(testStepIds: ReadonlyArray<string>): ReadonlyArray<messages.IAttachment>;
    /**
     * Get StepMatchArguments for a pickle step
     * @param pickleStepId
     */
    getStepMatchArgumentsLists(pickleStepId: string): ReadonlyArray<messages.TestCase.TestStep.IStepMatchArgumentsList> | undefined;
    getHook(hookId: string): messages.IHook;
    getBeforeHookSteps(pickleId: string): ReadonlyArray<messages.TestCase.ITestStep>;
    getAfterHookSteps(pickleId: string): ReadonlyArray<messages.TestCase.ITestStep>;
    private identifyHookSteps;
    getTestStepResults(testStepId: string): messages.TestStepFinished.ITestStepResult[];
}
