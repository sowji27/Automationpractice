"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var TreeRegexp_1 = __importDefault(require("./TreeRegexp"));
var Argument_1 = __importDefault(require("./Argument"));
var Errors_1 = require("./Errors");
var CucumberExpressionParser_1 = __importDefault(require("./CucumberExpressionParser"));
var Ast_1 = require("./Ast");
var ESCAPE_PATTERN = function () { return /([\\^[({$.|?*+})\]])/g; };
var CucumberExpression = /** @class */ (function () {
    /**
     * @param expression
     * @param parameterTypeRegistry
     */
    function CucumberExpression(expression, parameterTypeRegistry) {
        this.expression = expression;
        this.parameterTypeRegistry = parameterTypeRegistry;
        this.parameterTypes = [];
        var parser = new CucumberExpressionParser_1.default();
        var ast = parser.parse(expression);
        var pattern = this.rewriteToRegex(ast);
        this.treeRegexp = new TreeRegexp_1.default(pattern);
    }
    CucumberExpression.prototype.rewriteToRegex = function (node) {
        switch (node.type) {
            case Ast_1.NodeType.text:
                return CucumberExpression.escapeRegex(node.text());
            case Ast_1.NodeType.optional:
                return this.rewriteOptional(node);
            case Ast_1.NodeType.alternation:
                return this.rewriteAlternation(node);
            case Ast_1.NodeType.alternative:
                return this.rewriteAlternative(node);
            case Ast_1.NodeType.parameter:
                return this.rewriteParameter(node);
            case Ast_1.NodeType.expression:
                return this.rewriteExpression(node);
            default:
                // Can't happen as long as the switch case is exhaustive
                throw new Error(node.type);
        }
    };
    CucumberExpression.escapeRegex = function (expression) {
        return expression.replace(ESCAPE_PATTERN(), '\\$1');
    };
    CucumberExpression.prototype.rewriteOptional = function (node) {
        var _this = this;
        this.assertNoParameters(node, function (astNode) {
            return Errors_1.createParameterIsNotAllowedInOptional(astNode, _this.expression);
        });
        this.assertNoOptionals(node, function (astNode) {
            return Errors_1.createOptionalIsNotAllowedInOptional(astNode, _this.expression);
        });
        this.assertNotEmpty(node, function (astNode) {
            return Errors_1.createOptionalMayNotBeEmpty(astNode, _this.expression);
        });
        var regex = node.nodes.map(function (node) { return _this.rewriteToRegex(node); }).join('');
        return "(?:" + regex + ")?";
    };
    CucumberExpression.prototype.rewriteAlternation = function (node) {
        var _this = this;
        // Make sure the alternative parts aren't empty and don't contain parameter types
        node.nodes.forEach(function (alternative) {
            if (alternative.nodes.length == 0) {
                throw Errors_1.createAlternativeMayNotBeEmpty(alternative, _this.expression);
            }
            _this.assertNotEmpty(alternative, function (astNode) {
                return Errors_1.createAlternativeMayNotExclusivelyContainOptionals(astNode, _this.expression);
            });
        });
        var regex = node.nodes.map(function (node) { return _this.rewriteToRegex(node); }).join('|');
        return "(?:" + regex + ")";
    };
    CucumberExpression.prototype.rewriteAlternative = function (node) {
        var _this = this;
        return node.nodes.map(function (lastNode) { return _this.rewriteToRegex(lastNode); }).join('');
    };
    CucumberExpression.prototype.rewriteParameter = function (node) {
        var name = node.text();
        var parameterType = this.parameterTypeRegistry.lookupByTypeName(name);
        if (!parameterType) {
            throw Errors_1.createUndefinedParameterType(node, this.expression, name);
        }
        this.parameterTypes.push(parameterType);
        var regexps = parameterType.regexpStrings;
        if (regexps.length == 1) {
            return "(" + regexps[0] + ")";
        }
        return "((?:" + regexps.join(')|(?:') + "))";
    };
    CucumberExpression.prototype.rewriteExpression = function (node) {
        var _this = this;
        var regex = node.nodes.map(function (node) { return _this.rewriteToRegex(node); }).join('');
        return "^" + regex + "$";
    };
    CucumberExpression.prototype.assertNotEmpty = function (node, createNodeWasNotEmptyException) {
        var textNodes = node.nodes.filter(function (astNode) { return Ast_1.NodeType.text == astNode.type; });
        if (textNodes.length == 0) {
            throw createNodeWasNotEmptyException(node);
        }
    };
    CucumberExpression.prototype.assertNoParameters = function (node, createNodeContainedAParameterError) {
        var parameterNodes = node.nodes.filter(function (astNode) { return Ast_1.NodeType.parameter == astNode.type; });
        if (parameterNodes.length > 0) {
            throw createNodeContainedAParameterError(parameterNodes[0]);
        }
    };
    CucumberExpression.prototype.assertNoOptionals = function (node, createNodeContainedAnOptionalError) {
        var parameterNodes = node.nodes.filter(function (astNode) { return Ast_1.NodeType.optional == astNode.type; });
        if (parameterNodes.length > 0) {
            throw createNodeContainedAnOptionalError(parameterNodes[0]);
        }
    };
    CucumberExpression.prototype.match = function (text) {
        return Argument_1.default.build(this.treeRegexp, text, this.parameterTypes);
    };
    Object.defineProperty(CucumberExpression.prototype, "regexp", {
        get: function () {
            return this.treeRegexp.regexp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CucumberExpression.prototype, "source", {
        get: function () {
            return this.expression;
        },
        enumerable: false,
        configurable: true
    });
    return CucumberExpression;
}());
exports.default = CucumberExpression;
//# sourceMappingURL=CucumberExpression.js.map