"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var stream_1 = require("stream");
var CucumberHtmlStream = /** @class */ (function (_super) {
    __extends(CucumberHtmlStream, _super);
    /**
     * @param cssPath
     * @param jsPath
     */
    function CucumberHtmlStream(cssPath, jsPath) {
        var _this = _super.call(this, { objectMode: true }) || this;
        _this.template = null;
        _this.preMessageWritten = false;
        _this.postMessageWritten = false;
        _this.firstMessageWritten = false;
        _this.cssPath = cssPath;
        _this.jsPath = jsPath;
        return _this;
    }
    CucumberHtmlStream.prototype._transform = function (envelope, encoding, callback) {
        var _this = this;
        if (this.postMessageWritten) {
            return callback(new Error('Stream closed'));
        }
        this.writePreMessageUnlessAlreadyWritten(function (err) {
            if (err)
                return callback(err);
            _this.writeMessage(envelope);
            callback();
        });
    };
    CucumberHtmlStream.prototype._flush = function (callback) {
        this.writePostMessage(callback);
    };
    CucumberHtmlStream.prototype.writePreMessageUnlessAlreadyWritten = function (callback) {
        var _this = this;
        if (this.preMessageWritten) {
            return callback();
        }
        this.preMessageWritten = true;
        this.writeTemplateBetween(null, '{{css}}', function (err) {
            if (err)
                return callback(err);
            _this.writeFile(_this.cssPath, function (err) {
                if (err)
                    return callback(err);
                _this.writeTemplateBetween('{{css}}', '{{messages}}', function (err) {
                    if (err)
                        return callback(err);
                    // this.writeResource("cucumber-react.css", callback);
                    callback();
                });
            });
        });
    };
    CucumberHtmlStream.prototype.writePostMessage = function (callback) {
        var _this = this;
        this.writePreMessageUnlessAlreadyWritten(function (err) {
            if (err)
                return callback(err);
            _this.writeTemplateBetween('{{messages}}', '{{script}}', function (err) {
                if (err)
                    return callback(err);
                _this.writeFile(_this.jsPath, function (err) {
                    if (err)
                        return callback(err);
                    _this.writeTemplateBetween('{{script}}', null, callback);
                });
            });
        });
    };
    CucumberHtmlStream.prototype.writeFile = function (path, callback) {
        var _this = this;
        var cssStream = fs_1.default.createReadStream(path, { encoding: 'utf-8' });
        cssStream.on('data', function (chunk) { return _this.push(chunk); });
        cssStream.on('error', function (err) { return callback(err); });
        cssStream.on('end', callback);
    };
    CucumberHtmlStream.prototype.writeTemplateBetween = function (begin, end, callback) {
        var _this = this;
        this.readTemplate(function (err, template) {
            if (err)
                return callback(err);
            var beginIndex = begin == null ? 0 : template.indexOf(begin) + begin.length;
            var endIndex = end == null ? template.length : template.indexOf(end);
            _this.push(template.substring(beginIndex, endIndex));
            callback();
        });
    };
    CucumberHtmlStream.prototype.readTemplate = function (callback) {
        var _this = this;
        if (this.template !== null) {
            return callback(null, this.template);
        }
        fs_1.default.readFile(__dirname + '/index.mustache.html', { encoding: 'utf-8' }, function (err, template) {
            if (err)
                return callback(err);
            _this.template = template;
            return callback(null, template);
        });
    };
    CucumberHtmlStream.prototype.writeMessage = function (envelope) {
        if (!this.firstMessageWritten) {
            this.firstMessageWritten = true;
        }
        else {
            this.push(',');
        }
        this.push(JSON.stringify(envelope.toJSON()));
    };
    return CucumberHtmlStream;
}(stream_1.Transform));
exports.default = CucumberHtmlStream;
//# sourceMappingURL=CucumberHtmlStream.js.map