"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeUserInfoFromUrl = exports.detectCI = void 0;
var os_1 = __importDefault(require("os"));
var url_1 = require("url");
var messages_1 = require("@cucumber/messages");
var ciDict_json_1 = __importDefault(require("./ciDict.json"));
function createMeta(toolName, toolVersion, envDict, ciDict) {
    if (ciDict === undefined) {
        ciDict = ciDict_json_1.default;
    }
    return new messages_1.messages.Meta({
        protocolVersion: messages_1.version,
        implementation: new messages_1.messages.Meta.Product({
            name: toolName,
            version: toolVersion,
        }),
        cpu: new messages_1.messages.Meta.Product({
            name: os_1.default.arch(),
        }),
        os: new messages_1.messages.Meta.Product({
            name: os_1.default.platform(),
            version: os_1.default.release(),
        }),
        runtime: new messages_1.messages.Meta.Product({
            name: 'node.js',
            version: process.versions.node,
        }),
        ci: detectCI(ciDict, envDict),
    });
}
exports.default = createMeta;
function detectCI(ciDict, envDict) {
    var e_1, _a;
    var detected = [];
    try {
        for (var _b = __values(Object.entries(ciDict)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), ciName = _d[0], ciSystem = _d[1];
            var ci = createCi(ciName, ciSystem, envDict);
            if (ci) {
                detected.push(ci);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (detected.length !== 1) {
        return undefined;
    }
    return detected[0];
}
exports.detectCI = detectCI;
function removeUserInfoFromUrl(value) {
    if (!value)
        return value;
    var url = url_1.parse(value);
    if (url.auth === null)
        return value;
    url.auth = null;
    return url_1.format(url);
}
exports.removeUserInfoFromUrl = removeUserInfoFromUrl;
function createCi(ciName, ciSystem, envDict) {
    var url = evaluate(ciSystem.url, envDict);
    if (url === undefined) {
        // The url is what consumers will use as the primary key for a build
        // If this cannot be determined, we return nothing.
        return undefined;
    }
    return messages_1.messages.Meta.CI.create({
        url: url,
        name: ciName,
        git: {
            remote: removeUserInfoFromUrl(evaluate(ciSystem.git.remote, envDict)),
            revision: evaluate(ciSystem.git.revision, envDict),
            branch: evaluate(ciSystem.git.branch, envDict),
            tag: evaluate(ciSystem.git.tag, envDict),
        },
    });
}
/**
 * Evaluates a simple template
 *
 * @param template - the template from the ciDict.json file
 * @param envDict - variables
 * @return the evaluated template, or undefined if a variable was undefined
 */
function evaluate(template, envDict) {
    if (template === undefined) {
        return undefined;
    }
    try {
        return template.replace(/\${((refbranch|reftag)\s+)?([^\s}]+)(\s+\|\s+([^}]+))?}/g, function (substring) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var func = args[1];
            var variable = args[2];
            var defaultValue = args[4];
            var value = envDict[variable] || defaultValue;
            if (value === undefined) {
                throw new Error("Undefined variable: " + variable);
            }
            switch (func) {
                case 'refbranch':
                    return group1(value, /^refs\/heads\/(.*)/);
                case 'reftag':
                    return group1(value, /^refs\/tags\/(.*)/);
                default:
                    return value;
            }
        });
    }
    catch (err) {
        // There was an undefined variable
        return undefined;
    }
}
function group1(value, regexp) {
    var match = value.match(regexp);
    if (match === null)
        throw new Error('No match');
    return match[1];
}
//# sourceMappingURL=createMeta.js.map